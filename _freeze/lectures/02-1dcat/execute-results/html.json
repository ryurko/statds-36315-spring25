{
  "hash": "a2e9ba7c06e923984687249c8c9d270d",
  "result": {
    "markdown": "---\ntitle: \"1D Categorical Data\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[statds-36315-spring25](https://ryurko.github.io/statds-36315-spring25/)\"\ndate: 2025-01-15\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n## Announcements, previously, and today...\n\n+ **Complete HW0 by tonight!** Confirms you have everything installed and can [render `.qmd` files to PDF via `tinytex`](https://quarto.org/docs/output-formats/pdf-basics.html)\n\n+ Office hours will be announced soon... (I'll be in my office BH 132D today at 2:30 PM)\n\n. . .\n\n+ Discussed the importance of data visualization in your role as a statistician / data scientist\n\n+ Introduced the **Grammar of Graphics** as a framework for building visualizations\n\n+ Discussed historical examples and principles of visualization to keep in mind\n\n. . .\n\n**TODAY: 1D Categorical Data**\n\n+ Briefly talk about variable types\n\n+ Walk through different graphs for visualizing 1D categorical data\n\n---\n\n## Reminder: `tidy` data structure\n\nData are often stored in __tabular__ (or matrix) form:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n+ Each row `==` unit of observation, e.g., penguins\n\n+ Each column `==` variable/measurement about each observation, e.g., `flipper_length_mm`\n\n+ Known as a `data.frame` in base `R` and `tibble` in the `tidyverse`\n\n+ Two main variable types: quantitative and categorical\n\n---\n\n## Variable Types\n\n+ Most visualizations are about understanding the distribution of different variables (which are stored in columns of tabular/matrix data)\n\n+ The __variable type__ often dictates the type of graphs you should make\n\n+ There are two main types of variables:\n\n<!--\n\n1. __Quantitative__\n\n  + Discrete (i.e., counts, usually recorded as whole numbers), examples: number of likes/retweets, number of times word is used\n  \n  + Continuous (any real number), examples: income, age, miles run, heart rate\n  \n  + In `R` these are usually classified as `integer` or `numeric`\n  \n\n2. __Categorical__\n\nToday: Discuss what to do when you have a single column of categorical data (i.e., 1D categorical data)\n\n-->\n\n---\n\n## 1D Categorical Data\n\nTwo different versions of categorical:\n\n1. **Nominal**: coded with arbitrary numbers, i.e., no real order\n\n+ Examples: race, gender, species, text\n\n. . .\n\n2. **Ordinal**: levels with a meaningful order\n\n+ Examples: education level, grades, ranks\n  \n. . .\n\n__NOTE__: `R` and `ggplot` considers a categorical variable to be `factor`\n\n+ `R` will always treat categorical variables as ordinal! Defaults to alphabetical...\n  \n+ We will need to manually define the `factor` levels\n\n---\n\n## 1D categorical data structure\n\n+ Observations are collected into a vector $(x_1, \\dots, x_n)$, where $n$ is number of observations\n\n+ Each observed value $x_i$ can only belong to one category level $\\{ C_1, C_2, \\dots \\}$\n\n. . .\n\nLook at `penguins` data from the [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/) package, focusing on `species`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nhead(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Adelie Chinstrap Gentoo\n```\n:::\n:::\n\n\n***How could we summarize these data? What information would you report?***\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   Adelie Chinstrap    Gentoo \n      152        68       124 \n```\n:::\n:::\n\n\n---\n\n## Area plots\n\n![](https://clauswilke.com/dataviz/directory_of_visualizations_files/figure-html/proportions-1.png){fig-align=\"center\" width=65%}\n\n+ Each area corresponds to one categorical level\n\n+ Area is proportional to counts/frequencies/percentages\n\n+ Differences between areas correspond to differences between counts/frequencies/percentages\n\n\n---\n\n## Bar charts\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\nlibrary(tidyverse)\npenguins |>\n  ggplot(aes(x = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02-1dcat_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Behind the scenes: statistical summaries\n\n![](https://d33wubrfki0l68.cloudfront.net/70a3b18a1128c785d8676a48c005ee9b6a23cc00/7283c/images/visualization-stat-bar.png){fig-align=\"center\" width=65%}\n\nFrom [Chapter 3 of R for Data Science](https://r4ds.had.co.nz/data-visualisation.html)\n\n---\n\n## Spine charts - height version\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\npenguins |>\n  ggplot(aes(fill = species, x = \"\")) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02-1dcat_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Spine charts - width version\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(fill = species, x = \"\")) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](02-1dcat_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## So you want to make pie charts...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2-5\"}\npenguins |> \n  ggplot(aes(fill = species, x = \"\")) + \n  geom_bar(aes(y = after_stat(count))) +\n  coord_polar(theta = \"y\") +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](02-1dcat_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## [Friends Don't Let Friends Make Pie Charts](https://github.com/cxli233/FriendsDontLetFriends)\n\n![](https://raw.githubusercontent.com/cxli233/FriendsDontLetFriends/9267fcbb0e5db5a95c2cf624db3c53b50d6ee2fb/Results/dont_pie_chart.svg){fig-align=\"center\" width=80%}\n\n---\n\n## [Waffle charts](https://github.com/hrbrmstr/waffle) are cooler anyway...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(waffle)\npenguins |>\n  group_by(species) |> \n  summarize(count = n(), .groups = \"drop\") |> \n  ggplot(aes(fill = species, values = count)) +\n  geom_waffle(n_rows = 20, color = \"white\", flip = TRUE) +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](02-1dcat_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## [Florence Nightingale's](https://www.datavis.ca/gallery/flo.php) Rose Diagram \n\n![](https://daily.jstor.org/wp-content/uploads/2020/08/florence_nightingagle_data_visualization_visionary_1050x700.jpg){fig-align=\"center\" width=75%}\n\n---\n\n## Rose diagrams\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2-5\"}\npenguins |> \n  ggplot(aes(x = species)) + \n  geom_bar(fill = \"darkblue\") +\n  coord_polar() +\n  scale_y_sqrt()\n```\n\n::: {.cell-output-display}\n![](02-1dcat_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n\n## Recap and next steps\n\n::: {style=\"font-size: 80%;\"}\n\n\n+ 1D Categorical Data: look at counts, frequencies, percentages\n\n+ Area plots, where area $\\propto$ counts/frequencies/percentages:\n\n  + __Bar charts (you should pretty much always just make a bar chart)__\n  \n  + Spine charts (will be more useful with more variables)\n  \n  + Pie charts (__DON'T DO IT__)\n  \n  + Rose diagrams (temporal or directional context can justify usage)\n  \n:::\n  \n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n+ **Complete HW0 by TONIGHT!** Confirms you have everything installed and can [render `.qmd` files to PDF via `tinytex`](https://quarto.org/docs/output-formats/pdf-basics.html)\n\n+ **HW1 is due in two weeks, no class on Monday**\n\n:::\n\n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n+ **Next time**: quantify and display uncertainty for 1D categorical data\n\n+ Recommended reading: \n\n  + [CW Chapter 10 Visualizing proportions](https://clauswilke.com/dataviz/visualizing-proportions.html), [CW Chapter 16.2 Visualizing the uncertainty of point estimates](https://clauswilke.com/dataviz/visualizing-uncertainty.html#visualizing-the-uncertainty-of-point-estimates), [CW Chapter 11 Visualizing nested proportions](https://clauswilke.com/dataviz/nested-proportions.html)\n\n:::\n\n",
    "supporting": [
      "02-1dcat_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}