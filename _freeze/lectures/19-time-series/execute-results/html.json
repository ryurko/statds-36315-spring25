{
  "hash": "f25b13ad1d1ec7b44bafa61d0a94b3a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Time Series, Autocorrelation, and Seasonal Decomposition\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[statds-36315-spring25](https://ryurko.github.io/statds-36315-spring25/)\"\ndate: 2025-03-31\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n\n\n## Announcements, previously, and today...\n\n::: {style=\"font-size: 85%;\"}\n\n**HW7 is due Wednesday March April 2nd by 11:59 PM ET**\n\n**Graphics Critique 2 is due TONIGHT!**\n\n**You do NOT have lab this week - CARNIVAL!**\n\n:::\n\n. . .\n\n::: {style=\"font-size: 85%;\"}\n\n**Last time:**\n\n+ Discussed various aspects of visualizing trends\n\n+ When visualizing many lines, often useful to consider highlighting a small subset\n\n**TODAY:** Time series, autocorrelation, and seasonal decomposition\n\n:::\n\n---\n\n## Things of interest for time series data\n\nTime series can be characterized by three features:\n\n1. __Trends__: Does the variable increase or decrease over time, on average?\n\n2. __Seasonality__: Are there changes in the variable that regularly happen (e.g., every winter, every hour, etc.)? Sometimes called periodicity.\n\n3. __Noise__: Variation in the variable beyond average trends and seasonality.\n\n**Moving averages are a starting point for visualizing how a trend changes over time**\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fd6c748xw2pzm8.cloudfront.net%2Fprod%2Fc7ce2780-2f14-11eb-8e8a-cdb0723f9e68-standard.png?dpr=1&fit=scale-down&quality=highest&source=next&width=700){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://icharts.coinlore.com/img/simple-moving-averages-ftx-token.jpg?time=1680119681){fig-align='center'}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Be responsible with your axes!\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://cdn.sisense.com/wp-content/uploads/National-Review-Climate-Change-770x689.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Be responsible with your axes!\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](http://www.washingtonpost.com/blogs/the-fix/files/2015/12/NRO_Temp_1.jpg){fig-align='center' width=50%}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Moving Average Plots\n\nThe _Financial Times_ COVID-19 plots displayed a __moving average__ (sometimes called a __rolling average__)\n\n**Intuition**\n\n1. Divide your data into small subsets (\"windows\")\n\n2. Compute the average within each window\n\n3. Connect the averages together to make a trend line\n\n. . .\n\nSometimes called a __simple moving average__\n\nThis is exactly what we did with LOESS... we called this a _sliding window_, but it's the same thing\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n## How are moving averages computed?\n\n**Intuition**\n\n1. Divide your data into small subsets (_windows_)\n\n2. Compute the average within each window\n\n3. Connect the averages together to make a trend line\n\n. . .\n\nMathematically, a moving average can be written as the following:\n\n$$\\mu_k = \\frac{\\sum_{t=k - h + 1}^k X_t}{h}$$\n\n+ Large $h$: Smooth line; captures global trends\n\n+ Small $h$: Jagged/volatile line; captures local trends\n\n\n---\n\n## Working with Time Series\n\n`co2`: Mauna Loa Atmospheric CO2 Concentration dataset (monthly $\\text{CO}^2$ concentration 1959 to 1997)\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nco2_tbl |>\n  ggplot(aes(x = obs_i, y = co2_val)) + \n  geom_line() + \n  labs(x = \"Time index\", y = \"CO2 (ppm)\")\n```\n\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Formatting Dates\n\nCan use `as.Date()` to create time indexes.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\nDefault format is Year/Month/Day. For something else, need to specify `format` in `as.Date()` (e.g., `format = \"%m/%d/%Y\"`)\n\n---\n\n## Use `scale_x_date()` to create interpretable axis labels \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n### Use [`ggseas`](https://cran.r-project.org/web/packages/ggseas/vignettes/ggseas.html) package to plot moving averages\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggseas)\nco2_tbl |> \n  ggplot(aes(x = obs_date, y = co2_val)) + geom_line(color = \"red\") + \n  stat_rollapplyr(width = 12, align = \"right\") +\n  labs(x = \"Year\", y = \"CO2 (ppm)\", title = \"Width = 12\")\n```\n\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Other Moving Averages\n\n\nTwo other common averages: Cumulative moving averages and weighted moving averages.\n\n+ __Cumulative moving average__: The average at time $k$ is the average of all points at and before $k$. Mathematically:\n\n$$\\mu_k^{(CMA)} = \\frac{\\sum_{t=1}^k X_t}{k}$$\n\n. . .\n\n+ __Weighted moving average__: Same as simple moving average, but different measurements get different weights for the average.\n\n$$\\mu_k^{(WMA)} = \\frac{\\sum_{t=k - h + 1}^k X_t \\cdot w_t}{ \\sum_{t=k - h + 1}^k w_t}$$\n\n\n---\n\n## Working with lags\n\nTime series data is fundamentally different from other data problems we've worked with because measurements are  __not independent__\n\nObvious example: The temperature today is correlated with temperature yesterday. (_Maybe not in Pittsburgh?_)\n\n. . .\n\nImportant term: __lags__. Used to determine if one time point influences future time points.\n\nLag 1: Comparing time series at time $t$ with time series at time $t - 1$. \n\nLag 2: Comparing time series at time $t$ with time series at time $t - 2$.\n\nAnd so on...\n\n. . .\n\nLet's say we have time measurements $(X_1, X_2, X_3, X_4, X_5)$. \n\nThe $\\ell = 1$ lag is $(X_2, X_3, X_4, X_5)$ vs $(X_1, X_2, X_3, X_4)$. \n\n. . .\n\nThe $\\ell = 2$ lag is $(X_3, X_4, X_5)$ vs $(X_1, X_2, X_3)$.\n\nConsider: Are previous outcomes (lags) predictive of future outcomes?\n\n---\n\n## Autocorrelation\n\n__Autocorrelation__: Correlation between a time series and a lagged version of itself.\n\nDefine $r_{\\ell}$ as the correlation between a time series and Lag $\\ell$ of that time series.\n\n. . .\n\nLag 1: $r_1$ is correlation between $(X_2, X_3, X_4, X_5)$ and $(X_1,X_2,X_3,X_4)$ \n\nLag 2: $r_2$ is correlation between $(X_3, X_4, X_5)$ and $(X_1,X_2,X_3)$\n\nAnd so on...\n\n. . .\n\nCommon diagnostic: Plot $\\ell$ on x-axis, $r_{\\ell}$ on y-axis.\n\nTells us if correlations are \"significantly large\" or \"significantly small\" for certain lags\n\nTo make an autocorrelation plot, we use the `acf()` function; the `ggplot` version uses `autoplot()`\n\n---\n\n## Autocorrelation plots\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggfortify)\nauto_corr <- acf(co2_tbl$co2_val, plot = FALSE)\nautoplot(auto_corr)\n```\n\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Autocorrelation Plots and Seasonality\n\nWith strong global trends, autocorrelations will be very positive.\n\n**Helpful: Visualize autocorrelations after removing the global trend (compute moving average with `rollapply()`)**\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Autocorrelation Plots and Seasonality\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Seasonality Decomposition\n\nRemember that there are three main components to a time series:\n\n1. Average trends\n\n2. Seasonality\n\n3. Noise\n\n. . .\n\nUse `ggsdc()` (from [`ggseas`](https://cran.r-project.org/web/packages/ggseas/vignettes/ggseas.html)) to decompose a time series into these three components\n\n+ Plots the observed time series.\n\n+ Plots a loess curve as the global trend.\n\n+ Plots another loess curve on (observed - trend) as the seasonality.\n\n+ Plots the noise (observed - trend - seasonality).\n\n---\n\n## Seasonality Decomposition\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nco2_tbl |>\n  ggsdc(aes(obs_date, co2_val), frequency = 12, method = \"stl\", s.window = 12) +\n  geom_line() + labs(x = \"Year\", y = \"CO2 (ppm)\")\n```\n\n::: {.cell-output-display}\n![](19-time-series_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n---\n\n## Recap and next steps\n\n+ Fundamental characteristic of time series data: measurements are dependent over time\n\n+ The things to look out for in time series data are: (1) Average trends, (2) Seasonality, (3) Noise\n\n+ Autocorrelation plots are also useful for assessing average trends and seasonality.\n\n. . .\n\n+ **HW7 is due Wednesday!**\n\n+ **Graphics Critique 2 is due TONIGHT!**\n\n. . .\n\n+ **Next time**: Animations, infographics, and annotations\n\n+ Recommended reading: [CW CH 13 Visualizing time series and other functions of an independent variable](https://clauswilke.com/dataviz/time-series.html), [CW CH 14 Visualizing trends](https://clauswilke.com/dataviz/visualizing-trends.html)\n",
    "supporting": [
      "19-time-series_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}