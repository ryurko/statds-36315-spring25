{
  "hash": "0de008dae61922d2d25d19899b99c958",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Nonlinear Regression and Pairs Plots\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[statds-36315-spring25](https://ryurko.github.io/statds-36315-spring25/)\"\ndate: 2025-03-10\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n\n## Announcements, previously, and today...\n\n::: {style=\"font-size: 90%;\"}\n\n**HW5 is due next Wednesday March 19th by 11:59 PM ET**\n\nAs part of Homework 5, you'll form groups for final projects\n\n+ Teams should be 3-4 students, __you can pick your teammates or be randomized to a team__\n\n+ Goal of the project: create and interpet hiqh-quality visualizations for a dataset of your choice\n\n+ Project requirements and rubrics are available on Canvas\n\n+ EDA reports are graded as as group, while presentations are graded individually\n\n+ HW5 is short so you have time to form teams and explore datasets\n\n**You do NOT have lab this week**\n\n**TODAY:** How does LOESS (nonlinear regression) work? And maybe pairs plots\n\n:::\n\n---\n\n\n## Beyond Linear Regression\n\nMany kinds of regression methods - we'll focus on _local linear regression_ for now.\n\nLet's say: Still willing to assume Normality, but not linearity where $f(x)$ is some unknown function\n\n$$Y_i \\stackrel{iid}{\\sim} N(\\underbrace{f(X_i)}, \\sigma^2)$$\n\n**Intuition: Any nonlinear function is locally linear**\n\nWe saw this in the extrapolation example\n\n+ Local linear regressions fits a bunch of, well, local linear regressions, and then glues them together\n\n+ Local linear regression is basically _weighted linear regression_, where only \"local units\" get weight\n\n---\n\n## Weighted Linear Regression\n\nRemember that in typical linear regression, we solve the following:\n\n$$\\arg \\min_{\\beta_0,\\beta_1} \\sum_{i=1}^n (Y_i - \\beta_0 - \\beta_1 X_i)^2$$\n\nIn weighted linear regression, we solve the following:\n\n$$\\arg \\min_{\\beta_0,\\beta_1} \\sum_{i=1}^n w_i \\cdot (Y_i - \\beta_0 - \\beta_1 X_i)^2$$\n\n\nLocal linear regression is exactly the same, except the weights depend on which $x$ we want to estimate $f(x)$.\n\n---\n\n## Local linear regression via LOESS\n\n$Y_i \\overset{iid}{\\sim} N(f(x), \\sigma^2)$, where $f(x)$ is some unknown function\n\n. . .\n\nIn __local linear regression__, we estimate $f(X_i)$:\n\n$$\\text{arg }\\underset{\\beta_0, \\beta_1}{\\text{min}} \\sum_i^n w_i(x) \\cdot \\big(Y_i - \\beta_0 - \\beta_1 X_i \\big)^2$$ \n\n. . .\n\n`geom_smooth()` uses tri-cubic weighting:\n\n$$w_i(d_i) = \\begin{cases} (1 - |d_i|^3)^3, \\text{ if } i \\in \\text{neighborhood of  } x, \\\\\n0 \\text{ if } i \\notin \\text{neighborhood of  } x \\end{cases}$$\n\n  - $d_i$ is the distance between $x$ and $X_i$ scaled to be between 0 and 1\n  \n  - `span`: decides proportion of observations in neighborhood (default is 0.75)\n  \n\n---\n\n## [Animation example](http://rafalab.dfci.harvard.edu/dsbook/smoothing.html)\n\n![](http://rafalab.dfci.harvard.edu/dsbook/ml/img/loess-animation.gif){fig-align=\"center\" width=50%}\n\n---\n\n## [Animation example](http://rafalab.dfci.harvard.edu/dsbook/smoothing.html) - changing the span\n\n![](http://rafalab.dfci.harvard.edu/dsbook/ml/img/loess-multi-span-animation.gif){fig-align=\"center\" width=50%}\n\n---\n\n## Displaying trend lines: LOESS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n*For $n > 1000$, `mgcv::gam()` is used with `formula = y ~ s(x, bs = \"cs\")` and `method = \"REML\"`*\n\n---\n\n## Displaying trend lines: LOESS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(span = .1)\n```\n\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Displaying trend lines: LOESS\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(span = 1)\n```\n\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Back to the penguins...\n\nPretend I give you this `penguins` dataset and I ask you to make a plot __for every pairwise comparison__...\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\nWe can create a __pairs plot__ to see __all__ pairwise relationships __in one plot__\n\nPairs plot can include the various kinds of pairwise plots we've seen:\n\n- Two quantitative variables: scatterplot\n\n- One categorical, one quantitative: side-by-side violins, stacked\nhistograms, overlaid densities\n\n- Two categorical: stacked bars, side-by-side bars, mosaic plots\n\n---\n\n## Create pairs plots with [`GGally`](https://ggobi.github.io/ggally/index.html)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(GGally)\npenguins |> ggpairs(columns = 3:6)\n```\n\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Create pairs plots with [`GGally`](https://ggobi.github.io/ggally/index.html)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\npenguins |> ggpairs(columns = 3:6,\n                    mapping = aes(alpha = 0.5))\n```\n\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Flexibility in customization\n\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\npenguins |> \n  ggpairs(columns = c(\"bill_length_mm\", \"body_mass_g\", \"island\"),\n          mapping = aes(alpha = 0.5, color = species), \n          lower = list(\n            continuous = \"smooth_lm\", \n            combo = \"facetdensitystrip\"\n          ),\n          upper = list(\n            continuous = \"cor\",\n            combo = \"facethist\"\n          )\n  )\n```\n\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## See demo for more!\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-nonlinear-pairs_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Recap and next steps\n\n::: {style=\"font-size: 90%;\"}\n\nLOESS may seem like magic, but it's just a bunch of little linear regressions glued together\n\nPairs plots: Nice way to see all pairwise relationships in a dataset\n\n:::\n\n. . .\n\n::: {style=\"font-size: 90%;\"}\n\n+ **HW5 is due Wednesday March 19th and you do NOT have lab this Friday!**\n\n+ **Next time**: Contour Plots and Heat Maps\n\n:::\n\n\n",
    "supporting": [
      "13-nonlinear-pairs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}