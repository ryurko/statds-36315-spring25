{
  "hash": "8dd9d0e216bea143b1e22dc2f4c21e47",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing Distances for High-Dimensional Data\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[statds-36315-spring25](https://ryurko.github.io/statds-36315-spring25/)\"\ndate: 2025-03-17\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n\n## Announcements, previously, and today...\n\n::: {style=\"font-size: 75%;\"}\n\n**HW5 is due Wednesday March 19th by 11:59 PM ET**\n\nAs part of Homework 5, you'll form groups for final projects\n\n+ Teams should be 3-4 students, __you can pick your teammates or be randomized to a team__\n\n+ Goal of the project: create and interpet hiqh-quality visualizations for a dataset of your choice\n\n+ Project requirements and rubrics are available on Canvas\n\n+ EDA reports are graded as as group, while presentations are graded individually\n\n+ HW5 is short so you have time to form teams and explore datasets\n\n**You have Lab 7 this Friday**\n\n:::\n\n. . .\n\n::: {style=\"font-size: 75%;\"}\n\n**Last time:** Contour plots, heat maps, and diving into high-dimensional data\n\n**TODAY:**  How do we visualize structure of high-dimensional data?\n\n- Example: What if I give you a dataset with 50 variables, and ask you to make __one visualization__ that best represents the data? _What do you do?_\n\n- Do NOT panic and make $\\binom{50}{2} = 1225$ pairs of plots!\n\n- __Intuition__: Take high-dimensional data and __represent it in 2-3 dimensions__, then visualize those dimensions\n\n:::\n\n---\n\n## What about high-dimensional data?\n\nConsider this [dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-12-21/readme.md) about Starbucks drinks:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks <- \n  read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv\") |>\n  # Convert columns to numeric that were saved as character\n  mutate(trans_fat_g = as.numeric(trans_fat_g), fiber_g = as.numeric(fiber_g))\nstarbucks |> slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 15\n  product_name              size   milk  whip serv_size_m_l calories total_fat_g\n  <chr>                     <chr> <dbl> <dbl>         <dbl>    <dbl>       <dbl>\n1 brewed coffee - dark roa… short     0     0           236        3         0.1\n# ℹ 8 more variables: saturated_fat_g <dbl>, trans_fat_g <dbl>,\n#   cholesterol_mg <dbl>, sodium_mg <dbl>, total_carbs_g <dbl>, fiber_g <dbl>,\n#   sugar_g <dbl>, caffeine_mg <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nToday: **Visualize structure among observations using distances matrices**\n\n---\n\n## Thinking about distance...\n\n::: {style=\"font-size: 75%;\"}\n\nWhen describing visuals, we've implicitly \"clustered\" observations together\n\n- e.g., where are the mode(s) in the data?\n\nThese types of task require characterizing the __distance__ between observations\n\n- Clusters: groups of observations that are \"close\" together\n\n:::\n\n. . .\n\n::: {style=\"font-size: 75%;\"}\n\nThis is easy to do for 2 quantitative variables: just make a scatterplot (possibly with contours or heatmap)\n\n**But how do we define \"distance\" for high-dimensional data?**\n\nLet $\\boldsymbol{x}_i = (x_{i1}, \\dots, x_{ip})$ be a vector of $p$ features for observation $i$\n\nQuestion of interest: How \"far away\" is $\\boldsymbol{x}_i$ from $\\boldsymbol{x}_j$?\n\n:::\n\n. . .\n\n::: {style=\"font-size: 75%;\"}\n\nWhen looking at a scatterplot, you're using __Euclidean distance__ (length of the line in $p$-dimensional space):\n\n$$d(\\boldsymbol{x}_i, \\boldsymbol{x}_j) = \\sqrt{(x_{i1} - x_{j1})^2 + \\dots + (x_{ip} - x_{jp})^2}$$\n\n:::\n\n---\n\n## Distances in general\n\nThere's a variety of different types of distance metrics: [Manhattan](https://en.wikipedia.org/wiki/Taxicab_geometry), [Mahalanobis](https://en.wikipedia.org/wiki/Mahalanobis_distance), [Cosine](https://en.wikipedia.org/wiki/Cosine_similarity), [Kullback-Leiber Divergence](https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence), [Wasserstein](https://en.wikipedia.org/wiki/Wasserstein_metric), but we're just going to focus on [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance)\n\n$d(\\boldsymbol{x}_i, \\boldsymbol{x}_j)$ measures pairwise distance between two observations $i,j$ and has the following properties:\n\n1. __Identity__: $\\boldsymbol{x}_i = \\boldsymbol{x}_j \\iff d(\\boldsymbol{x}_i, \\boldsymbol{x}_j) = 0$\n\n2. __Non-Negativity__: $d(\\boldsymbol{x}_i, \\boldsymbol{x}_j) \\geq 0$\n\n3. __Symmetry__: $d(\\boldsymbol{x}_i, \\boldsymbol{x}_j) = d(\\boldsymbol{x}_j, \\boldsymbol{x}_i)$\n\n4. __Triangle Inequality__: $d(\\boldsymbol{x}_i, \\boldsymbol{x}_j) \\leq d(\\boldsymbol{x}_i, \\boldsymbol{x}_k) + d(\\boldsymbol{x}_k, \\boldsymbol{x}_j)$\n\n. . .\n\n__Distance Matrix__: matrix $D$ of all pairwise distances\n\n- $D_{ij} = d(\\boldsymbol{x}_i, \\boldsymbol{x}_j)$\n\n- where $D_{ii} = 0$ and $D_{ij} = D_{ji}$\n\n\n---\n\n## What could go wrong with Euclidean distance?\n\n---\n\n## Multi-dimensional scaling (MDS)\n\n::: {style=\"font-size: 75%;\"}\n\n**General approach for visualizing distance matrices**\n\nPuts $n$ observations in a $k$-dimensional space such that the distances are preserved as much as possible\n\n - where $k << p$ typically choose $k = 2$\n \n:::\n  \n. . .\n\n::: {style=\"font-size: 75%;\"}\n\nMDS attempts to create new point $\\boldsymbol{y}_i = (y_{i1}, y_{i2})$ for each unit such that:\n\n$$\\sqrt{(y_{i1} - y_{j1})^2 + (y_{i2} - y_{j2})^2} \\approx D_{ij}$$\n\n- i.e., distance in 2D MDS world is approximately equal to the actual distance\n\n:::\n\n. . .\n\n::: {style=\"font-size: 75%;\"}\n\n**Then plot the new $\\boldsymbol{y}$s on a scatterplot**\n\n- Use the `scale()` function to ensure variables are comparable\n\n- Make a distance matrix for this dataset\n\n- Visualize it with MDS\n\n:::\n\n---\n\n## MDS workflow example with Starbucks drinks\n\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nstarbucks_quant_data <- starbucks |> \n  dplyr::select(serv_size_m_l:caffeine_mg)\n\nstarbucks_scaled_quant_data <- \n  scale(starbucks_quant_data, center = FALSE, \n        scale = apply(starbucks_quant_data, 2, sd, na.rm = TRUE))\n\ndist_euc <- dist(starbucks_scaled_quant_data)\nstarbucks_mds <- cmdscale(d = dist_euc, k = 2)\n\nstarbucks <- starbucks |> \n  mutate(mds1 = starbucks_mds[,1], mds2 = starbucks_mds[,2])\n\nstarbucks |>\n  ggplot(aes(x = mds1, y = mds2)) + \n  geom_point(alpha = 0.5) +\n  labs(x = \"Coordinate 1\", y = \"Coordinate 2\") +\n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![](15-distance-mds_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## What does `dist()` return?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndist(starbucks_scaled_quant_data[1:8,])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          1         2         3         4         5         6         7\n2 1.0597905                                                            \n3 2.1605009 1.1015883                                                  \n4 3.3885615 2.3316426 1.2323454                                        \n5 1.4722992 2.3802999 3.4258192 4.6439965                              \n6 1.5671249 2.2148502 3.1494033 4.3218904 0.6904406                    \n7 1.9247890 2.2591636 3.0086115 4.0906365 1.3835219 0.6941308          \n8 2.4275777 2.4999068 3.0232984 3.9688066 2.0714599 1.3824217 0.6883099\n```\n\n\n:::\n:::\n\n\n\n\n**Default distance calculation is Euclidean**\n\n---\n\n## What does `cmdscale` do?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks_mds <- cmdscale(d = dist_euc, k = 2)\n```\n:::\n\n\n\n\n`cmdscale()` is the function we use to run MDS and it has two inputs: \n\n1. `d`: distance matrix, e.g., `dist_euc`\n\n2. `k`: number of dimensions we want, e.g., usually 2 for visualization purposes\n\nInput is $N \\times N$ matrix, and the output is $N \\times 2$\n\nTo grab the output, we just grab the two columns of `starbucks_mds` and then can\nmake a scatterplot of these two new dimensions\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks <- starbucks |> \n  mutate(mds1 = starbucks_mds[,1],  mds2 = starbucks_mds[,2])\n```\n:::\n\n\n\n\n\n---\n\n## Interpreting the 2D projection\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks |>\n  ggplot(aes(x = mds1, y = mds2)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Coordinate 1\", y = \"Coordinate 2\") +\n  coord_fixed() \n```\n\n::: {.cell-output-display}\n![](15-distance-mds_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## View structure with additional variables - `size`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nstarbucks |>\n  ggplot(aes(x = mds1, y = mds2, color = size)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Coordinate 1\", y = \"Coordinate 2\") +\n  coord_fixed() \n```\n\n::: {.cell-output-display}\n![](15-distance-mds_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## View structure with additional variables - `sugar_g`\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2,5\"}\nstarbucks |>\n  ggplot(aes(x = mds1, y = mds2, color = sugar_g)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Coordinate 1\", y = \"Coordinate 2\") +\n  scale_color_gradient(low = \"darkblue\", high = \"darkorange\") +\n  coord_fixed() \n```\n\n::: {.cell-output-display}\n![](15-distance-mds_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Recap and next steps\n\n::: {style=\"font-size: 80%;\"}\n\nWhen data is high dimensional, it's impossible to visualize _every_ dimension in the data, so instead:\n\n**We reduce the data to a small number of dimensions, and then plot those dimensions**\n\n1. __Compute a distance matrix__: reduces the data to a single distance between points\n\n2. __Run Multi-Dimensional Scaling (MDS)__: summarizes the distance matrix in 2 or 3 dimensions\n\n3. __Plot the dimensions provided by MDS__\n\nAdding other dimensions (e.g., via color) when plotting MDS can be a great way to see structure (such as clusters) in the data\n\n:::\n\n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n+ **HW5 is due Wednesday March 19th and you have lab this Friday!**\n\n+ **Next time**: Dendrograms to visualize distances and clusters\n\n+ **Review more code in lecture demos!**\n\n:::\n\n\n",
    "supporting": [
      "15-distance-mds_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}