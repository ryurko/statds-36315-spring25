{
  "hash": "50c49a9bace9e54cf3111736e2b78215",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Contour Plots, Heat Maps, and Into High-Dimensional Data\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[statds-36315-spring25](https://ryurko.github.io/statds-36315-spring25/)\"\ndate: 2025-03-12\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n\n## Announcements, previously, and today...\n\n::: {style=\"font-size: 80%;\"}\n\n**HW5 is due next Wednesday March 19th by 11:59 PM ET**\n\nAs part of Homework 5, you'll form groups for final projects\n\n+ Teams should be 3-4 students, __you can pick your teammates or be randomized to a team__\n\n+ Goal of the project: create and interpet hiqh-quality visualizations for a dataset of your choice\n\n+ Project requirements and rubrics are available on Canvas\n\n+ EDA reports are graded as as group, while presentations are graded individually\n\n+ HW5 is short so you have time to form teams and explore datasets\n\n**You do NOT have lab this week**\n\n:::\n\n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n**Last time:**\n\n+ LOESS: bunch of little linear regressions glued together\n\n+ Pairs plots: convenient wrapper to creating several visualizations at once\n\n**TODAY:** Contour Plots and Heat Maps\n\n:::\n\n---\n\n## 2D quantitative data\n\n- We're working with two variables: $(X, Y) \\in \\mathbb{R}^2$, i.e., dataset with $n$ rows and 2 columns\n\n- Goals:\n\n  - describing the relationships between two variables\n  \n  - describing the conditional distribution $Y | X$ via regression analysis\n  \n  - **TODAY: describing the joint distribution $X,Y$ via contours, heatmaps, etc.**\n\n- Few big picture ideas to keep in mind:\n\n  - scatterplots are by far the most common visual\n  \n  - regression analysis is by far the most popular analysis (you have a whole class on this...)\n  \n  - relationships may vary across other variables, e.g., categorical variables\n  \n---\n\n## What about focusing on the joint distribution?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\nExample [dataset of pitches](https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/ohtani_pitches_2023.csv) thrown by baseball superstar [Shohei Ohtani](https://www.baseball-reference.com/players/o/ohtansh01.shtml)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_point(alpha = 0.2) +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Going from 1D to 2D density estimation\n\nIn 1D: estimate density $f(x)$, assuming that $f(x)$ is _smooth_:\n\n$$\n\\hat{f}(x) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h} K_h(x - x_i)\n$$\n\n. . .\n\nIn 2D: estimate joint density $f(x_1, x_2)$\n\n$$\\hat{f}(x_1, x_2) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h_1h_2} K(\\frac{x_1 - x_{i1}}{h_1}) K(\\frac{x_2 - x_{i2}}{h_2})$$\n\n. . .\n\nIn 1D there was one bandwidth, now __we have two bandwidths__\n\n  - $h_1$: controls smoothness as $X_1$ changes, holding $X_2$ fixed\n  - $h_2$: controls smoothness as $X_2$ changes, holding $X_1$ fixed\n\nAgain Gaussian kernels are the most popular...\n\n---\n\n## So how do we display densities for 2D data?\n\n![](https://www.byclb.com/TR/Tutorials/neural_networks/Ch_4_dosyalar/image044.gif){fig-align=\"center\" width=60%}\n\n\n---\n\n## How to read contour plots?\n\nBest known in topology: outlines (contours) denote levels of elevation\n\n![](https://preview.redd.it/2rbe8s8t7re31.jpg?auto=webp&s=eed849b180dd803d394f556432df026c4cd1dae2){fig-align=\"center\" width=60%}\n\n\n---\n\n## Display 2D contour plot\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_point(alpha = 0.2) +\n  geom_density2d() +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Display 2D contour plot\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_density2d() +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Display 2D contour plot\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3,5\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  stat_density2d(aes(fill = after_stat(level)), geom = \"polygon\") +\n  coord_fixed() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Visualizing grid heat maps\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3-4,6\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  stat_density2d(aes(fill = after_stat(density)), \n                 geom = \"tile\", contour = FALSE) + \n  coord_fixed() +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Alternative idea: hexagonal binning\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_hex() +\n  coord_fixed() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## [LeBron James' shots](https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/lebron_shots.csv) from [`hoopR`](https://hoopr.sportsdataverse.org/)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlebron_shots <- read_csv(\"https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/lebron_shots.csv\")\nlebron_shots |>\n  ggplot(aes(x = coordinate_x, y = coordinate_y)) +\n  geom_point(alpha = 0.4) +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Display 2D contour plot\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlebron_shots |>\n  ggplot(aes(x = coordinate_x, y = coordinate_y)) +\n  geom_point(alpha = 0.4) +\n  geom_density2d(binwidth = 0.0001) + \n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Alternative idea: hexagonal binning\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nlebron_shots |>\n  ggplot(aes(x = coordinate_x, y = coordinate_y)) +\n  geom_hex() +\n  coord_fixed() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## What about high-dimensional data?\n\nConsider this [dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-12-21/readme.md) containing nutritional information about Starbucks drinks:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks <- \n  read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv\") |>\n  # Convert columns to numeric that were saved as character\n  mutate(trans_fat_g = as.numeric(trans_fat_g), fiber_g = as.numeric(fiber_g))\nstarbucks |> slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 15\n  product_name              size   milk  whip serv_size_m_l calories total_fat_g\n  <chr>                     <chr> <dbl> <dbl>         <dbl>    <dbl>       <dbl>\n1 brewed coffee - dark roa… short     0     0           236        3         0.1\n# ℹ 8 more variables: saturated_fat_g <dbl>, trans_fat_g <dbl>,\n#   cholesterol_mg <dbl>, sodium_mg <dbl>, total_carbs_g <dbl>, fiber_g <dbl>,\n#   sugar_g <dbl>, caffeine_mg <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n**How do we visualize this dataset? **\n\n- Tedious task: make a series of pairs plots (one giant pairs plot would overwhelming)\n\n\n---\n\n## What about high-dimensional data?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks <- \n  read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv\") |>\n  # Convert columns to numeric that were saved as character\n  mutate(trans_fat_g = as.numeric(trans_fat_g), fiber_g = as.numeric(fiber_g))\nstarbucks |> slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 15\n  product_name              size   milk  whip serv_size_m_l calories total_fat_g\n  <chr>                     <chr> <dbl> <dbl>         <dbl>    <dbl>       <dbl>\n1 brewed coffee - dark roa… short     0     0           236        3         0.1\n# ℹ 8 more variables: saturated_fat_g <dbl>, trans_fat_g <dbl>,\n#   cholesterol_mg <dbl>, sodium_mg <dbl>, total_carbs_g <dbl>, fiber_g <dbl>,\n#   sugar_g <dbl>, caffeine_mg <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n**Goals to keep in mind with visualizing high-dimensional data:**\n\n- __Visualize structure among observations__ based on distances and projections (next lecture)\n\n- __Visualize structure among variables__ using correlation as \"distance\"\n\n---\n\n## Correlogram to visualize correlation matrix\n\nUse the [`ggcorrplot`](https://rpkgs.datanovia.com/ggcorrplot/) package:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks_quant_cor <- cor(dplyr::select(starbucks, serv_size_m_l:caffeine_mg))\n\nlibrary(ggcorrplot)\nggcorrplot(starbucks_quant_cor)\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Options to customize correlogram \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggcorrplot(starbucks_quant_cor,\n           type = \"lower\", method = \"circle\")\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Reorder variables based on correlation\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggcorrplot(starbucks_quant_cor,\n           type = \"lower\", method = \"circle\",\n           hc.order = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Heatmap displays of observations\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nheatmap(as.matrix(dplyr::select(starbucks, serv_size_m_l:caffeine_mg)),\n        scale = \"column\", \n        labRow = starbucks$product_name,\n        cexRow = .5, cexCol = .75,\n        Rowv = NA, Colv = NA)\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Manual version of heatmaps\n\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nstarbucks |>\n  dplyr::select(product_name, serv_size_m_l:caffeine_mg) |>\n  pivot_longer(serv_size_m_l:caffeine_mg,\n               names_to = \"variable\",\n               values_to = \"raw_value\") |>\n  group_by(variable) |>\n  mutate(std_value = (raw_value - mean(raw_value)) / sd(raw_value)) |>\n  ungroup() |>\n  ggplot(aes(y = variable, x = product_name, fill = std_value)) +\n  geom_tile() +\n  theme_light() +\n  theme(axis.text.x = element_text(size = 1, angle = 45),\n        legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Manual version of heatmaps\n\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nstarbucks |>\n  dplyr::select(product_name, serv_size_m_l:caffeine_mg) |>\n  mutate(product_name = fct_reorder(product_name, calories)) |>\n  pivot_longer(serv_size_m_l:caffeine_mg,\n               names_to = \"variable\",\n               values_to = \"raw_value\") |>\n  group_by(variable) |>\n  mutate(std_value = (raw_value - mean(raw_value)) / sd(raw_value)) |>\n  ungroup() |>\n  ggplot(aes(y = variable, x = product_name, fill = std_value)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") +\n  theme_light() +\n  theme(axis.text.x = element_text(size = 1, angle = 45),\n        legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Parallel coordinates plot with [`ggparcoord`](https://ggobi.github.io/ggally/reference/ggparcoord.html)\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(GGally)\nstarbucks |>\n  ggparcoord(columns = 5:15, alphaLines = .1) +\n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Easier example with penguins...\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  ggparcoord(columns = 3:6, alphaLines = .2, groupColumn = \"species\",\n             order = c(6, 5, 3, 4))\n```\n\n::: {.cell-output-display}\n![](14-contours-heatmaps_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n---\n\n## Recap and next steps\n\n::: {style=\"font-size: 80%;\"}\n\nWe can extend kernel density estimation from 1 to $p$-dimensions (don't say easily though...)\n\nContour plots: Common way to visualize two-dimensional densities\n\nHeat maps: divide the space into a grid, and then color the grid according to high/low densities\n\nHexagonal bins: creating histograms in 2D\n\nCorrelograms and Parallel Coordinates Plots are helpful tools for visualizing high-dimensional data\n\n:::\n\n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n+ **HW5 is due Wednesday March 19th and you do NOT have lab this Friday!**\n\n+ **Next time**: Visualizing Distances and MDS\n\n:::\n\n\n",
    "supporting": [
      "14-contours-heatmaps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}