{
  "hash": "ac0f6298ad1e459b3776e976051d23d0",
  "result": {
    "markdown": "---\ntitle: \"Dendrograms for Visualizing Distances and Clusters\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[statds-36315-spring25](https://ryurko.github.io/statds-36315-spring25/)\"\ndate: 2025-03-19\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n## Announcements, previously, and today...\n\n::: {style=\"font-size: 75%;\"}\n\n**HW5 is due TONIGHT by 11:59 PM ET**\n\n**You have Lab 7 this Friday**\n\n**HW6 is due next Wednesday March 26th by 11:59 PM ET**\n\n:::\n\n. . .\n\n::: {style=\"font-size: 75%;\"}\n\n**Last time:** General approach for visualizing distance matrices\n\n- Puts $n$ observations in a $k$-dimensional space such that the distances are preserved as much as possible\n\n  - where $k << p$ typically choose $k = 2$\n  \nMDS attempts to create new point $\\boldsymbol{y}_i = (y_{i1}, y_{i2})$ for each unit such that:\n\n$$\\sqrt{(y_{i1} - y_{j1})^2 + (y_{i2} - y_{j2})^2} \\approx D_{ij}$$\n\n- i.e., distance in 2D MDS world is approximately equal to the actual distance\n\n**Then plot the new $\\boldsymbol{y}$s on a scatterplot**\n\n- Use the `scale()` function to ensure variables are comparable\n\n- Make a distance matrix for this dataset\n\n- Visualize it with MDS\n\n:::\n\n\n---\n\n## Demo: [MCU movie data](https://informationisbeautiful.net/visualizations/which-is-the-best-performing-marvel-movie/)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmcu_movies <- read_csv(\"https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/mcu_movies.csv\")\nmcu_movies\n```\n\n::: {.cell-output .cell-output-stdout}\n```{style='font-size: 0.5em;'}\n# A tibble: 30 × 18\n   film  category worldwide_gross_m percent_budget_recov…¹ critics_percent_score\n   <chr> <chr>                <dbl>                  <dbl>                 <dbl>\n 1 Ant-… Ant-Man                518                    398                    83\n 2 Ant-… Ant-Man                623                    479                    87\n 3 Aven… Avengers              1395                    382                    76\n 4 Aven… Avengers              2797                    699                    94\n 5 Aven… Avengers              2048                    683                    85\n 6 Blac… Black P…              1336                    668                    96\n 7 Blac… Black P…               855                    342                    84\n 8 Blac… Unique                 379                    190                    79\n 9 Capt… Captain…               370                    264                    79\n10 Capt… Captain…              1151                    460                    90\n# ℹ 20 more rows\n# ℹ abbreviated name: ¹​percent_budget_recovered\n# ℹ 13 more variables: audience_percent_score <dbl>,\n#   audience_vs_critics_percent_deviance <dbl>, budget <dbl>,\n#   domestic_gross_m <dbl>, international_gross_m <dbl>,\n#   opening_weekend_m <dbl>, second_weekend_m <dbl>,\n#   x1st_vs_2nd_weekend_drop_off <dbl>, …\n```\n:::\n:::\n\n\n\n---\n\n## MCU meets MDS\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nmcu_quant <- mcu_movies |> dplyr::select(-c(film, category, year))\n\nmcu_quant <- apply(mcu_quant, MARGIN = 2, FUN = function(x) x / sd(x))\nrownames(mcu_quant) <- mcu_movies$film\n\nmcu_dist <- dist(mcu_quant)\nmcu_mds <- cmdscale(d = dist(mcu_quant), k = 2)\nmcu_movies <- mcu_movies |> mutate(mds1 = mcu_mds[,1], mds2 = mcu_mds[,2])\n\nmcu_movies |>\n  ggplot(aes(x = mds1, y = mds2)) +\n  # Use text labels instead of points:\n  geom_text(aes(label = film), alpha = .75) +\n  labs(x = \"MDS Coordinate 1\", y = \"MDS Coordinate 2\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Other ways to visualize distances and clusters\n\nMDS can be a great way to visualize distances and identify clusters...\n\n- However, requires picking certain variables that identify clusters well\n\n**Is there a way to automatically identify clusters in the dataset?**\n\n. . .\n\n- Dendrograms are a nice way to visualize distances \n\n- _Automatically_ clusters different units together based on distance\n\n$$\\overbrace{\\text{Dendro}}^{\\text{tree}}\\underbrace{\\text{gram}}_{\\text{drawing}}$$\n\nFirst, let's look at dendrograms and learn how to interpret them - then we'll discuss how they're made\n\n---\n\n## [Textbook example](https://bradleyboehmke.github.io/HOML/hierarchical.html)\n\n![](https://bradleyboehmke.github.io/HOML/19-hierarchical_files/figure-html/comparing-dendrogram-to-distances-1.png){fig-align=\"center\" width=100%}\n\n---\n\n## [Textbook example](https://bradleyboehmke.github.io/HOML/hierarchical.html)\n\n![](https://bradleyboehmke.github.io/HOML/19-hierarchical_files/figure-html/comparing-dendrogram-to-distances-1.png){fig-align=\"center\" width=75%}\n\n::: {style=\"font-size: 80%;\"}\n\n- Observations that are _closer_ together are on the same branch\n\n- Doesn't tell you how many clusters there are, but does tell you which observations are clustered together\n\n- For now: What is the computer doing to make dendrograms?\n\n:::\n\n---\n\n## (Agglomerative) [Hierarchical clustering](https://en.wikipedia.org/wiki/Hierarchical_clustering)\n\nLet's pretend all $N$ observations are in their own cluster\n\nStep 1: Compute the pairwise dissimilarities between each cluster\n\n - e.g., distance matrix on previous slides\n  \n. . .\n  \nStep 2: Identify the pair of clusters that are __least dissimilar__\n\n. . .\n\nStep 3: Fuse these two clusters into a new cluster!\n\n. . .\n\n__Repeat Steps 1 to 3 until all observations are in the same cluster__\n\n__\"Bottom-up\"__, agglomerative clustering that forms a __tree / hierarchy__ of merging\n\n\n---\n\n## (Agglomerative) [Hierarchical clustering](https://en.wikipedia.org/wiki/Hierarchical_clustering)\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/Clusters.svg/250px-Clusters.svg.png){fig-align=\"center\" width=70%}\n\n---\n\n## Forms a dendrogram\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/Hierarchical_clustering_simple_diagram.svg/418px-Hierarchical_clustering_simple_diagram.svg.png){fig-align=\"center\" width=85%}\n\n\n---\n\n## How do we define dissimilarity between clusters?\n\n::: {style=\"font-size: 80%;\"}\n\nWe know how to compute distance / dissimilarity between two observations\n\n__But how do we handle clusters?__\n\n  - Dissimilarity between a cluster and an observation, or between two clusters\n  \n:::\n  \n. . .\n\n::: {style=\"font-size: 80%;\"}\n\nWe need to choose a __linkage function__! Clusters are built up by __linking them together__\n\nCompute all pairwise dissimilarities between observations in cluster 1 with observations in cluster 2\n\ni.e. Compute the distance matrix between observations, $d(x_i, x_j)$ for $i \\in C_1$ and $j \\in C_2$\n\n:::\n\n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n  - __Complete linkage__: Use the __maximum__ value of these dissimilarities: $\\underset{i \\in C_1, j \\in C_2}{\\text{max}} d(x_i, x_j)$\n\n  - __Single linkage__: Use the __minimum__ value: $\\underset{i \\in C_1, j \\in C_2}{\\text{min}} d(x_i, x_j)$\n\n  - __Average linkage__: Use the __average__ value: $\\frac{1}{|C_1| \\cdot |C_2|} \\sum_{i \\in C_1} \\sum_{j \\in C_2} d(x_i, x_j)$\n\n\nDefine dissimilarity between two clusters __based on our initial dissimilarity matrix between observations__\n\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhc_complete <- hclust(mcu_dist, method = \"complete\")\nplot(hc_complete, ylab = \"Pairwise Distance\", main = \"Complete Linkage\", xlab = \"MCU Movies\")\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhc_single <- hclust(mcu_dist, method = \"single\")\nplot(hc_single, ylab = \"Pairwise Distance\", main = \"Single Linkage\", xlab = \"MCU Movies\")\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## [`ggdendro` version](https://cran.r-project.org/web/packages/ggdendro/vignettes/ggdendro.html)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggdendro)\nggdendrogram(hc_complete, theme_dendro = FALSE) + #<<\n  labs(y = \"Cluster Dissimilarity (based on complete linkage)\", \n       title = \"Which MCU movies are similar to each other?\") + \n  coord_flip() + theme_bw() + theme(axis.title.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Display MDS plot with dendrogram side-by-side\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nlibrary(patchwork)\nhc_complete_ggdendro <- ggdendrogram(hc_complete, theme_dendro = FALSE) +\n  labs(y = \"Cluster Dissimilarity (based on complete linkage)\", \n       title = \"Which MCU movies are similar to each other?\") + \n  coord_flip() +\n  theme_bw() +\n  # Remove the y-axis title (changed from x to y since we flipped it!)\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_text(size = 6),\n        plot.title = element_text(size = 10))\n\nmcu_mds_plot <- mcu_movies |>\n  ggplot(aes(x = mds1, y = mds2)) +\n  geom_text(aes(label = film),\n            alpha = .75, size = 2) +\n  labs(x = \"MDS Coordinate 1\", y = \"MDS Coordinate 2\") +\n  theme_bw()\n\nmcu_mds_plot + hc_complete_ggdendro\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## How do we assign cluster labels?\n\n**We cut the dendrogram to return cluster labels**\n\nTwo ways to specify how to cut the tree using the `cutree` function:\n\n1) via the height using `h`, e.g., cut the tree at height = 10\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutree(hc_complete, h = 10)\n```\n:::\n\n\n. . .\n\n2) via the desired number of clusters `k` - and let the computer figure out the height for us, e.g., `k = 2`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutree(hc_complete, k = 2)\n```\n:::\n\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmcu_clusters <- cutree(hc_complete, h = 10)\nmcu_clusters\n```\n\n::: {.cell-output .cell-output-stdout}\n```{style='font-size: 0.5em;'}\n                          Ant-Man                Ant-Man & The Wasp \n                                1                                 1 \n          Avengers: Age of Ultron                Avengers: End Game \n                                1                                 2 \n           Avengers: Infinity War                     Black Panther \n                                2                                 2 \n                  Black Panther 2                       Black Widow \n                                1                                 1 \n                  Captain America        Captain America: Civil War \n                                1                                 1 \n  Captain America: Winter Soldier                    Captain Marvel \n                                1                                 2 \n                       Dr Strange Dr Strange: Multiverse of Madness \n                                1                                 1 \n                         Eternals           Guardians of the Galaxy \n                                1                                 1 \n        Guardians of the Galaxy 2                   Incredible Hulk \n                                1                                 1 \n                         Iron Man                        Iron Man 2 \n                                1                                 1 \n                       Iron Man 3                         Shang-Chi \n                                1                                 1 \n        Spider-Man: Far from Home            Spider-Man: Homecoming \n                                1                                 1 \n          Spider-Man: No Way Home                      The Avengers \n                                2                                 2 \n                 Thor: Dark World              Thor: Love & Thunder \n                                1                                 1 \n                   Thor: Ragnarok                              Thor \n                                1                                 1 \n```\n:::\n:::\n\n\n---\n\n## View results with cut on dendrogram\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\ncut_dendro <- hc_complete_ggdendro +\n  # This is a horizontal line since its considered before the flip:\n  geom_hline(yintercept = 10, linetype = \"dashed\", \n             color = \"darkred\")\n\ncluster_mcu_mds_plot <- mcu_movies |>\n  mutate(cluster = as.factor(mcu_clusters)) |>\n  ggplot(aes(x = mds1, y = mds2,\n             color = cluster)) +\n  geom_text(aes(label = film),\n            alpha = .75, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"MDS Coordinate 1\", y = \"MDS Coordinate 2\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\ncluster_mcu_mds_plot + cut_dendro\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## [`factoextra` package](https://rpkgs.datanovia.com/factoextra/index.html) version\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(factoextra)\nfviz_dend(hc_complete, cex = 0.5, k = 3, color_labels_by_k = TRUE)\n```\n\n::: {.cell-output-display}\n![](16-clustering_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Recap and next steps\n\n::: {style=\"font-size: 80%;\"}\n\n+ Dendrograms are a great way to visualize distances and the clustering structure in the dataset\n\n+ However there are several decisions to be made! \n\n+ *What type of linkage is appropriate for the problem?*\n\n+ *How do we [choose the number of clusters](https://www.datanovia.com/en/lessons/determining-the-optimal-number-of-clusters-3-must-know-methods/)?*\n\n**There is NOT a one size fits all solution to any of this!**\n\n:::\n\n. . .\n\n::: {style=\"font-size: 80%;\"}\n\n+ **HW5 is due TONIGHT and you have lab this Friday!**\n\n+ **HW6 is posted and due next Wednesday March 26th**\n\n+ **Next time**: PCA\n\n+ **Review more code in lecture demos!**\n\n:::\n\n\n",
    "supporting": [
      "16-clustering_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}