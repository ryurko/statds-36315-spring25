{
  "hash": "ad4ae4f424f2f78cb08d3531e2b670ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Demo 02: Scatterplots and Linear Regression\"\nformat: html\n---\n\n\n\n\n# Scatterplots with Penguins\n\n**The graphs below don't have proper titles, axis labels, legends, etc.  Please take care to do this on your own graphs.** Throughout this demo we will use the [`palmerpenguins` dataset](https://allisonhorst.github.io/palmerpenguins/articles/intro.html). To access the data, you will need to install the `palmerpenguins` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n\n\n# Geometric layer\n\nWe use `geom_point()` to generate scatterplots (requires `x` and `y` aes)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\n\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n# Always adjust transparency!\n\nScatterplots display the joint distribution of the variables along the `x` and `y` axes. You should always adjust the transparency of points via `alpha` to visualize overlap - providing a better understanding of joint frequency. This is especially important with larger datasets.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n# Mapping Aesthetics\n\n## Colors\n\nWe can color by a third variable (e.g., different color for each category). \n\nNote that, just like the `x` and `y` aesthetics, you can put `color = ` inside `ggplot` or `geom_point` - both display the same visualization:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point(alpha = 0.5, aes(color = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can also color by a quantitative variable using a color scale/gradient:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point(alpha = 0.5, aes(color = body_mass_g))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nThe default color gradient is not the most appealing, while there are a number of possibilities - blue to orange is a good choice since these colors are opposites on the color spectrum:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point(alpha = 0.5, aes(color = body_mass_g)) +\n  scale_color_gradient(low = \"darkblue\", high = \"darkorange\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Point size (`size`)\n\nWe can also map variables to other aesthetics, e.g. `size`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point(alpha = 0.5, aes(size = body_mass_g))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## Point type (`shape`)\n\nOr the type (`shape`) of points:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point(alpha = 0.5, aes(shape = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Combining aesthetics\n\nWe can even do several of these at once:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm,\n             color = species, shape = island,\n             size = body_mass_g)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe above graph may be a bit difficult to read, but it contains a lot of information in the sense that it is a 5-dimensional graphic:\n\n+  `x` = bill depth (mm)\n+  `y` = bill length (mm)\n+  `color` = species\n+  `size` = body mass (g)\n+  `shape` = island\n\n### But be careful!  \n\nThe more complications you add, the more difficult your graph is to explain.\n\n![](https://i.imgur.com/Rt3LdqG.gif)\n\n# Trend Lines\n\nWe can do different forms of statistical modeling **within our plots** (e.g., with `geom_smooth()`).\n\nFor example, we can add a linear regression line to our plot very easily. For this example, we'll switch to looking at `body_mass_g` against `flipper_length_mm`.   \n\n## Linear regression\n\nTo do this, we can use `+ geom_smooth(method = lm)`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n##Linear regression (with error bars)\n\nAbove, I added `se = FALSE` so that the standard error bars do not show up in the graph. Setting this parameter to `TRUE` produces (by default) 95% confidence intervals.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can change the level of the confidence intervals using the `level` argument:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = TRUE, level = 0.99)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nHowever, from these graphs, it's not clear if the linear regression is a good fit. We can \"eyeball\" this by looking at the fitted versus residuals, or we can make a residual-versus-fit plot.\n\nWhat's a residual-versus-fit plot? In short, the \"fits\" are the estimated y-values from the linear regression (i.e., the y-values along the linear regression line). Meanwhile, the \"residuals\" are the distance between the actual y-values and the fits. A residual-versus-fit plot is itself a scatterplot, **with fits on the x-axis and residuals on the y-axis.**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlin_reg <- lm(body_mass_g ~ flipper_length_mm, data = penguins)\nfitted_vals <- fitted(lin_reg)\nres_vals <- residuals(lin_reg)\ntibble(fits = fitted_vals, \n       residuals = res_vals) |>\n  ggplot(aes(x = fits, y = residuals)) +\n  geom_point() +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\")\n```\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\nWe look for two things when looking at residual-versus-fit plots:\n\n+ Is there any trend around the 0 horizontal line? If so, that might be a violation of the linearity assumption (more on this next class).\n+ Do the points have equal vertical spread from left to right? If not, that might be a violation of the equal variance assumption.\n\nWe'll talk about these assumptions more next class.\n\n# Variable Transformations\n\n## Transformations of the outcome\n\nWe can transform variables as well -- again, **within the plot**. First, we will focus on the outcome `y`; in particular, we will focus on log transformations. This can be done through the `y` argument...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = log(body_mass_g))) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Transformations of Covariates\n\nIt's also possible to include transformations of the covariates instead of (or in addition to) transformations of the outcome. For example, the following plots a quadratic regression model (i.e., plots `y ~ x + x^2`).\n\nNote that the `formula` argument in `geom_smooth` requires you to write in terms of `y` and `x`, NOT the variable names!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", \n              formula = y ~ x + I(x^2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nTo assess if this is a better fit, we can again make a fitted-versus-residual plot (this looks better!):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquad_lin_reg <- lm(body_mass_g ~ flipper_length_mm + I(flipper_length_mm^2), \n                   data = penguins)\nquad_fitted_vals <- fitted(quad_lin_reg)\nquad_res_vals <- residuals(quad_lin_reg)\ntibble(fits = quad_fitted_vals, \n       residuals = quad_res_vals) |>\n  ggplot(aes(x = fits, y = residuals)) +\n  geom_point() +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\")\n```\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n## Non-Linear Trends\n\nWe can also do other types of modeling, e.g. local regression / loess smoothing:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"loess\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nCheck the help documentation for `geom_smooth()` and `stat_smooth()` to see what methods are available and how to use them. The most common choices are \"lm\", \"glm\", \"gam\", and \"loess\". \n\nNote that if you don't put anything in `geom_smooth`, it will select \"auto\", which typically uses `loess` for small datasets and `gam` for large datasets. [However, it uses a particular form of smoothing splines](https://stackoverflow.com/questions/45114724/setting-method-as-default-method-in-geom-smooth-gives-different-result), so in practice I recommend you specify a particular statistical method (e.g., \"lm\", \"loess\") so you actually know what you're plotting.\n\n## Useful for residual diagnostics\n\nConvenient to add `+ geom_smooth()` to residual plots to help display any trends:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(fits = fitted_vals, \n       residuals = res_vals) |>\n  ggplot(aes(x = fits, y = residuals)) +\n  geom_point() +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") +\n  geom_smooth(method = \"loess\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\nwhich appears to be alleviated with the quadratic transformation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(fits = quad_fitted_vals, \n       residuals = quad_res_vals) |>\n  ggplot(aes(x = fits, y = residuals)) +\n  geom_point() +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") +\n  geom_smooth(method = \"loess\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n\n##  Leave The Points, take The Regression Model? (This is a bad idea...)\n\nWe don't even need to plot the points to do this -- you can plot the regression model by itself by simply omitting `geom_point()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_smooth(method = \"loess\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\nAs always, you can adjust some parameters (like `color`, `alpha`, etc.):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_smooth(method = \"loess\", se = TRUE, fill = \"darkorange\", \n              color = \"darkblue\", size = 2, alpha = 0.2) +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plot-2dquant_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\nHowever, __in general I don't recommend doing this__, because it hides the data entirely, making it unclear which data points are influencing the regression line.\n\n\n",
    "supporting": [
      "02-plot-2dquant_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}