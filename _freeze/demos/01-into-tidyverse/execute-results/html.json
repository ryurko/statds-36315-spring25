{
  "hash": "27450dc46e17ff9853736af5212d7ec4",
  "result": {
    "markdown": "---\ntitle: \"Demo 01: Into the tidyverse\"\nformat: html\n---\n\n\n## What is Exploratory Data Analysis (EDA)?\n\n_(Broadly speaking)_ EDA = questions about data + wrangling + visualization \n\n[`R` for Data Science](https://r4ds.hadley.nz): _\"EDA is a state of mind\"_, an iterative cycle:\n\n- generate questions\n\n- answer via transformations and visualizations\n\nExample of questions?\n\n- What type of __variation__ do the variables display?\n\n- What type of __relationships__ exist between variables?\n\n__Goal__: develop understanding and become familiar with your data\n\n- EDA is __NOT__ a replacement for statistical inference and learning\n\n- EDA is an __important__ and __necessary__ step to build intuition\n\nWe tackle the challenges of EDA with a data science workflow. An example of this according to [Hadley Wickham](http://hadley.nz/) in [`R` for Data Science](https://r4ds.had.co.nz/):\n\n![](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png){fig-align=\"center\" width=65%}\n\nAspects of data __wrangling__:\n\n- __import__: reading in data (e.g., `read_csv()`)\n\n- __tidy__: rows = observations, columns = variables (i.e. __tabular__ data)\n\n- __transform__: filter observations, create new variables, summarize, etc. \n\n\n## Working with [`penguins`](https://allisonhorst.github.io/palmerpenguins/articles/intro.html)\n\nIn `R`, there are many libraries or packages/groups of programs that are not permanently stored in `R`, so we have to load them when we want to use them. You can load an `R` package by typing `library(package_name)`. (Sometimes we need to download/install the package first, as described in HW0.)\n\nThroughout this demo we will use the [`palmerpenguins` dataset](https://allisonhorst.github.io/palmerpenguins/articles/intro.html). To access the data, you will need to install the `palmerpenguins` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n__Import__ the `penguins` dataset by loading the `palmerpenguins` package using the `library` function and then access the data with the `data()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins) \ndata(penguins)\n```\n:::\n\n\nView some basic info about the `penguins` dataset:\n\n::: {.cell}\n\n```{.r .cell-code}\n# displays same info as c(nrow(penguins), ncol(penguins))\ndim(penguins) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 344   8\n```\n:::\n\n```{.r .cell-code}\nclass(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n`tbl` (pronounced `tibble`) is the `tidyverse` way of storing tabular data, like a spreadsheet or `data.frame`\n\nI assure you that you'll run into errors as you code in `R`; in fact, my attitude as a coder is that something is wrong if I *never* get any errors while working on a project. When you run into an error, your first reaction may be to panic and post a question to Piazza. However, checking help documentation in `R` can be a great way to figure out what's going wrong. (For good or bad, I end up having to read help documentation almost every day of my life - because, well, I regularly make mistakes in `R`.)\n\nLook at the help documentation for `penguins` by typing `help(penguins)` in the Console. What are the names of the variables in this dataset? How many observations are in this dataset?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(penguins)\n```\n:::\n\n\n__You should always look at your data before doing anything__: view the first 6 (by default) rows with `head()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins) # Try just typing penguins into your console, what happens?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nIs our `penguins` dataset __tidy__?\n\n- Each row = a single penguin\n\n- Each column = different measurement about the penguins (can print out column names directly with `colnames(penguins)` or `names(penguins)`)\n\n__We'll now explore differences among the penguins using the `tidyverse`__.\n\n## Let the data wrangling begin...\n\nFirst, load the `tidyverse` for exploring the data - and do NOT worry about the warning messages that will pop-up! Warning messages will tell you when other packages that are loaded may have functions replaced with the most recent package you've loaded. In general though, you should just be concerned when an error message pops up (errors are different than warnings!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nWe'll start by __summarizing__ _continuous_ (e.g., `bill_length_mm`, `flipper_length_mm`) and _categorical_ (e.g., `species`, `island`) variables in different ways.\n\nWe can compute __summary statistics__ for _continuous_ variables with the `summary()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(penguins$bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  32.10   39.23   44.45   43.92   48.50   59.60       2 \n```\n:::\n:::\n\n\nCompute __counts__ of _categorical_ variables with `table()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(\"island\" = penguins$island) # be careful it ignores NA values!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nisland\n   Biscoe     Dream Torgersen \n      168       124        52 \n```\n:::\n:::\n\n\nHow do we remove the penguins with missing `bill_length_mm` values? Within the `tidyverse`, [`dplyr`](https://dplyr.tidyverse.org/) is a package with functions for data wrangling (because it's within the tidyverse that means you do NOT have to load it separately with `library(dplyr)` after using `library(tidyverse)`!). It's considered a _\"grammar of data manipulation\"_: `dplyr` functions are __verbs__, datasets are __nouns__.\n\n__We can [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) our dataset to choose observations meeting conditions__:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_penguins <- filter(penguins, !is.na(bill_length_mm))\n# Use help(is.na) to see what it returns. And then observe \n# that the ! operator means to negate what comes after it.\n# This means !TRUE == FALSE (i.e., opposite of TRUE is equal to FALSE).\nnrow(penguins) - nrow(clean_penguins) # Difference in rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nIf we want to only consider a subset of columns in our data, __we can [`select()`](https://dplyr.tidyverse.org/reference/select.html) variables of interest__:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_penguins <- select(clean_penguins, species, island, bill_length_mm, flipper_length_mm)\nhead(sel_penguins, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  species island    bill_length_mm flipper_length_mm\n  <fct>   <fct>              <dbl>             <int>\n1 Adelie  Torgersen           39.1               181\n2 Adelie  Torgersen           39.5               186\n3 Adelie  Torgersen           40.3               195\n```\n:::\n:::\n\n\n__We can [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) our dataset to sort observations by variables__:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_penguins <- arrange(sel_penguins, desc(bill_length_mm)) # use desc() for descending order\nhead(bill_penguins, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  species   island bill_length_mm flipper_length_mm\n  <fct>     <fct>           <dbl>             <int>\n1 Gentoo    Biscoe           59.6               230\n2 Chinstrap Dream            58                 181\n3 Gentoo    Biscoe           55.9               228\n```\n:::\n:::\n\n\n__We can [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html) our dataset to one row based on functions of variables__:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(bill_penguins, max(bill_length_mm), median(flipper_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  `max(bill_length_mm)` `median(flipper_length_mm)`\n                  <dbl>                       <dbl>\n1                  59.6                         197\n```\n:::\n:::\n\n\n__We can [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) our dataset to create new variables__:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_penguins <- mutate(bill_penguins, \n                       bill_flipper_ratio = bill_length_mm / flipper_length_mm,\n                       flipper_bill_ratio = flipper_length_mm / bill_length_mm)\nhead(new_penguins, n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  species island bill_length_mm flipper_length_mm bill_flipper_ratio\n  <fct>   <fct>           <dbl>             <int>              <dbl>\n1 Gentoo  Biscoe           59.6               230              0.259\n# ℹ 1 more variable: flipper_bill_ratio <dbl>\n```\n:::\n:::\n\n\nHow do we perform several of these actions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(arrange(select(mutate(filter(penguins, !is.na(flipper_length_mm)), bill_flipper_ratio = bill_length_mm / flipper_length_mm), species, island, bill_flipper_ratio), desc(bill_flipper_ratio)), n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  species   island bill_flipper_ratio\n  <fct>     <fct>               <dbl>\n1 Chinstrap Dream               0.320\n```\n:::\n:::\n\n\nThat's awfully annoying to do, and also difficult to read...\n\n## Enter the pipeline\n\nThe `|>` (_pipe_) operator is used in the  to chain commands together. Note: you can also use the `tidyverse` pipe `%>%` (from [`magrittr`](https://magrittr.tidyverse.org/articles/magrittr.html)), but `|>` is the built-in pipe that is native to new versions of `R` without loading the `tidyverse`.\n\n`|>` directs the __data analyis pipeline__: output of one function pipes into input of the next function\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  filter(!is.na(flipper_length_mm)) |>\n  mutate(bill_flipper_ratio = bill_length_mm / flipper_length_mm) |>\n  select(species, island, bill_flipper_ratio) |>\n  arrange(desc(bill_flipper_ratio)) |>\n  head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  species   island bill_flipper_ratio\n  <fct>     <fct>               <dbl>\n1 Chinstrap Dream               0.320\n2 Chinstrap Dream               0.275\n3 Chinstrap Dream               0.270\n4 Chinstrap Dream               0.270\n5 Chinstrap Dream               0.268\n```\n:::\n:::\n\n\n## More pipeline actions!\n\nInstead of `head()`, __we can [`slice()`](https://dplyr.tidyverse.org/reference/slice.html) our dataset to choose the observations based on the position__\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  filter(!is.na(flipper_length_mm)) |>\n  mutate(bill_flipper_ratio = bill_length_mm / flipper_length_mm) |>\n  select(species, island, bill_flipper_ratio) |>\n  arrange(desc(bill_flipper_ratio)) |>\n  slice(c(1, 2, 10, 100))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  species   island bill_flipper_ratio\n  <fct>     <fct>               <dbl>\n1 Chinstrap Dream               0.320\n2 Chinstrap Dream               0.275\n3 Chinstrap Dream               0.264\n4 Gentoo    Biscoe              0.227\n```\n:::\n:::\n\n\n## Grouped operations\n\n__We [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) to split our dataset into groups based on a variable's values__\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  filter(!is.na(flipper_length_mm)) |>\n  group_by(island) |>\n  summarize(n_penguins = n(), #counts number of rows in group\n            ave_flipper_length = mean(flipper_length_mm), \n            sum_bill_depth = sum(bill_depth_mm),\n            .groups = \"drop\") |> # all levels of grouping dropping\n  arrange(desc(n_penguins)) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  island    n_penguins ave_flipper_length sum_bill_depth\n  <fct>          <int>              <dbl>          <dbl>\n1 Biscoe           167               210.          2651.\n2 Dream            124               193.          2275.\n3 Torgersen         51               191.           940.\n```\n:::\n:::\n\n\n- `group_by()` is only useful in a pipeline (e.g. with `summarize()`), and pay attention to its behavior \n\n- specify the `.groups` field to decide if observations remain grouped or not after summarizing (you can also use `ungroup()` for this as well)\n\n## Putting it all together...\n\nAs your own exercise, create a __tidy__ dataset where each row == an island with the following variables:\n\n- number of penguins,\n- number of unique species on the island (see `help(unique)`),\n- average `body_mass_g`, \n- variance (see `help(var)`) of `bill_depth_mm`\n\nPrior to making those variables, make sure to filter missings and also only consider female penguins. Then arrange the islands in order of the average `body_mass_g`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT YOUR CODE HERE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}