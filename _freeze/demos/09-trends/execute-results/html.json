{
  "hash": "23de62bb8df8db6387843275c3028f1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Demo 09: Visualizing trends\"\nformat: html\n---\n\n\n\n\n## PhDs Awarded by Field Over Time\n\nIn this demo, we'll first work with a dataset on the number of PhD degrees awarded in the US from [TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-02-19).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in the tidytuesday data\nlibrary(tidyverse)\nphd_field <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-02-19/phd_by_field.csv\")\nphd_field\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,370 × 5\n   broad_field   major_field                                 field   year n_phds\n   <chr>         <chr>                                       <chr>  <dbl>  <dbl>\n 1 Life sciences Agricultural sciences and natural resources Agric…  2008    111\n 2 Life sciences Agricultural sciences and natural resources Agric…  2008     28\n 3 Life sciences Agricultural sciences and natural resources Agric…  2008      3\n 4 Life sciences Agricultural sciences and natural resources Agron…  2008     68\n 5 Life sciences Agricultural sciences and natural resources Anima…  2008     41\n 6 Life sciences Agricultural sciences and natural resources Anima…  2008     18\n 7 Life sciences Agricultural sciences and natural resources Anima…  2008     77\n 8 Life sciences Agricultural sciences and natural resources Envir…  2008    182\n 9 Life sciences Agricultural sciences and natural resources Fishi…  2008     52\n10 Life sciences Agricultural sciences and natural resources Food …  2008     96\n# ℹ 3,360 more rows\n```\n\n\n:::\n:::\n\n\n\n\nLet's start by grabbing the rows corresponding to Statistics PhDs. While there are a number of ways to do this, we can grab `field` containing \"statistics\" (including biostatistics) with the `str_detect()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_phds <- phd_field |>\n  filter(str_detect(tolower(field), \"statistics\"))\n```\n:::\n\n\n\n\nWhat are the different fields that were captured?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(stats_phds$field)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n                       Biometrics and biostatistics \n                                                 10 \n           Educational statistics, research methods \n                                                 10 \nManagement information systems, business statistics \n                                                 10 \n                Mathematics and statistics, general \n                                                 10 \n                  Mathematics and statistics, other \n                                                 10 \n                           Statistics (mathematics) \n                                                 10 \n                       Statistics (social sciences) \n                                                 10 \n```\n\n\n:::\n:::\n\n\n\n\nTo start, let's just summarize the number of PhDs by `year`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_phd_year_summary <- stats_phds |>\n  group_by(year) |>\n  summarize(n_phds = sum(n_phds))\n```\n:::\n\n\n\n\nNow, we'll make the typical scatterplot display with `n_phds` on the y-axis and `year` on the x-axis:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_phd_year_summary |>\n  ggplot(aes(x = year, y = n_phds)) +\n  geom_point() +\n  theme_bw() +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nWe should fix our x-axis here and make the breaks more informative. In this case,\nI'll change it so each year is labeled (that may not be appropriate for every visual but it works out here).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_phd_year_summary |>\n  ggplot(aes(x = year, y = n_phds)) +\n  geom_point() +\n  # Modify the x-axis to make the axis breaks at the unique years and show their\n  # respective labels\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nTo emphasize the ordering of the year along the x-axis, we'll add a line connecting the points to emphasize the order:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_phd_year_summary |>\n  ggplot(aes(x = year, y = n_phds)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can drop the points, leaving only the connecting lines to emphasize trends:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_phd_year_summary |>\n  ggplot(aes(x = year, y = n_phds)) +\n  geom_line() +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nAnother common way to display trends is by filling in the area under the line. However, this is only appropriate when the y-axis starts at 0! It's also redundant use of ink so just be careful when deciding whether or not to fill the area. We can fill the area under the line with the `geom_area()` aesthetic - but note that it changes the y-axis by default to start at 0:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_phd_year_summary |>\n  ggplot(aes(x = year, y = n_phds)) +\n  # Fill the area under the line\n  geom_area(fill = \"darkblue\", alpha = 0.5) +\n  geom_line() +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can also make this plot using the [`ggridges` package](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html).\n\n## Plotting and labeling several lines\n\nWe'll now switch to displaying the different Statistics fields separately with the `stats_phds` dataset. First, __we should NOT display multiple time series with just points as follows__:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_phds |>\n  ggplot(aes(x = year, y = n_phds, color = field)) +\n  geom_point() +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        # Adjust the size of the legend's text\n        legend.text = element_text(size = 5),\n        legend.title = element_text(size = 6)) +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\",\n       color = \"Field\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nIt's much simpler to just display the lines to compare the trends:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_phds |>\n  ggplot(aes(x = year, y = n_phds, color = field)) +\n  geom_line() +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        # Adjust the size of the legend's text\n        legend.text = element_text(size = 5),\n        legend.title = element_text(size = 6)) +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\",\n       color = \"Field\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nThe legend is pretty cluttered though, instead we can directly label the displayed lines using the [`ggrepel` package](https://ggrepel.slowkow.com/articles/examples.html). We first need to create a dataset with just the final values (which in this case corresponds to `year == 2017`), and then add labels for these values. To make the labels visible, we need to increase our x-axis limits. Note that this is a \"hack\", but you will rely on hacks to customize visuals in the future... The following code chunk demonstrates how to do this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_phds_2017 <- stats_phds |>\n  filter(year == 2017)\n\n# Access the ggrepel package:\n# install.packages(\"ggrepel\")\nlibrary(ggrepel)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggrepel' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nstats_phds |>\n  ggplot(aes(x = year, y = n_phds, color = field)) +\n  geom_line() +\n  # Add the labels:\n  geom_text_repel(data = stats_phds_2017,\n                  aes(label = field),\n                  size = 2, \n                  # Drop the segment connection:\n                  segment.color = NA, \n                  # Move labels up or down based on overlap\n                  direction = \"y\",\n                  # Try to align the labels horizontally on the left hand side\n                  hjust = \"left\") +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year),\n                     # Update the limits so that there is some padding on the\n                     # x-axis but don't label the new maximum\n                     limits = c(min(stat_phd_year_summary$year),\n                                max(stat_phd_year_summary$year) + 3)) +\n  theme_bw() +\n  # Drop the legend\n  theme(legend.position = \"none\") +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\",\n       color = \"Field\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nAn alternative approach is to use the [`gghighlight` package](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gghighlight)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'gghighlight' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nstats_phds |>\n  ggplot(aes(x = year, y = n_phds, color = field)) +\n  geom_line() +\n  gghighlight()  +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_light() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Year\", y = \"Number of PhDs\", color = \"Field\",\n       title = \"Number of Statistics-related PhDs awarded over time\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nlabel_key: field\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nNext, let's switch to back to the original dataset `phd_field`. What happens if we plot a line for every field attempting to use the `color` aesthetic to separate them?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphd_field |>\n  ggplot(aes(x = year, y = n_phds, color = field)) +\n  geom_line() +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\",\n       color = \"Field\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 270 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\nThe plot above is obviously a disaster... When we are dealing with potentially way too many categories, we can instead highlight lines of interest while setting the background lines to gray, so we can still see background trends. We need to use the `group` aesthetic to split the gray lines from each other. Plus, we should adjust the alpha due to the overlap. The following code chunk demonstrates how to do this for highlighting the \"Statistics (mathematics)\" and \"Biometrics and biostatistics\" lines. We essentially create separate plot layers by filtering on the `field` variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First display the background lines using the full dataset with those two fields \n# filtered out:\nphd_field |>\n  # The following line says: NOT (field in c(\"Biometrics and biostatistics\", \"Statistics (mathematics)\"))\n  filter(!(field %in% c(\"Biometrics and biostatistics\", \n                        \"Statistics (mathematics)\"))) |>\n  ggplot() +\n  # Add the background lines - need to specify the group to be the field\n  geom_line(aes(x = year, y = n_phds, group = field),\n            color = \"gray\", size = .5, alpha = .5) +\n  # Now add the layer with the lines of interest:\n  geom_line(data = filter(phd_field,\n                          # Note this is just the opposite of the above since ! is removed\n                          field %in% c(\"Biometrics and biostatistics\", \n                                       \"Statistics (mathematics)\")),\n            aes(x = year, y = n_phds, color = field),\n            # Make the size larger\n            size = .75, alpha = 1) +\n  scale_x_continuous(breaks = unique(stat_phd_year_summary$year),\n                     labels = unique(stat_phd_year_summary$year)) +\n  theme_bw() +\n  theme(legend.position = \"bottom\", \n        # Drop the panel lines making the gray difficult to see\n        panel.grid = element_blank()) +\n  labs(x = \"Year\", y = \"Number of PhDs\",\n       title = \"Number of Statistics-related PhDs awarded over time\",\n       color = \"Field\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 270 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Florence Nightingale’s rose diagrams\n\nAnother way to visualize time series data is to display it in a cycle pattern, using polar coordinates, as done by Florence Nightingale's famous rose diagram. We can recreate the rose diagram by accessing the data in the `HistData` package. We'll first load and print out the first so many rows of the data below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(HistData)\nhead(Nightingale)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date Month Year  Army Disease Wounds Other Disease.rate Wounds.rate\n1 1854-04-01   Apr 1854  8571       1      0     5          1.4         0.0\n2 1854-05-01   May 1854 23333      12      0     9          6.2         0.0\n3 1854-06-01   Jun 1854 28333      11      0     6          4.7         0.0\n4 1854-07-01   Jul 1854 28722     359      0    23        150.0         0.0\n5 1854-08-01   Aug 1854 30246     828      1    30        328.5         0.4\n6 1854-09-01   Sep 1854 30290     788     81    70        312.2        32.1\n  Other.rate\n1        7.0\n2        4.6\n3        2.5\n4        9.6\n5       11.9\n6       27.7\n```\n\n\n:::\n:::\n\n\n\n\nTo recreate the plot, we'll need to first make a longer version of the dataset with the `Disease`, `Wounds`, and `Other` columns separated into three rows. To do that, we'll use the `pivot_longer()` function after just selecting the columns of interest for our plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimean_war_data <- Nightingale |>\n  dplyr::select(Date, Month, Year, Disease, Wounds, Other) |>\n  # Now pivot those columns to take up separate rows:\n  pivot_longer(Disease:Other,\n               names_to = \"cause\", values_to = \"count\")\n```\n:::\n\n\n\n\nNext, we'll make a label column matching Nightingale's plot based on the `Date` column. We'll talk about dates more below, but we can condition on being above or below certain dates in a natural way:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimean_war_data <- crimean_war_data |>\n  mutate(time_period = ifelse(Date <= as.Date(\"1855-03-01\"),\n                              \"April 1854 to March 1855\", \n                              \"April 1855 to March 1856\"))\n```\n:::\n\n\n\n\nAnd finally we can go ahead and display the rose diagram facetted by the time\nperiod (using similar colors to Nightingale):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimean_war_data |> \n  ggplot(aes(x = Month, y = count)) + \n  geom_col(aes(fill = cause), width = 1, \n           position = \"identity\", alpha = 0.5) + \n  coord_polar() + \n  facet_wrap(~ time_period, ncol = 2) +\n  scale_fill_manual(values = c(\"skyblue3\", \"grey30\", \"firebrick\")) +\n  scale_y_sqrt() +\n  theme_void() +\n  # All of this below is to just customize the theme in a way that we are\n  # close to resembling the original plot (ie lets make it look old!)\n  theme(axis.text.x = element_text(size = 9),\n        strip.text = element_text(size = 11),\n        legend.position = \"bottom\",\n        plot.background = element_rect(fill = alpha(\"cornsilk\", 0.5)),\n        plot.margin = unit(c(10, 10, 10, 10), \"pt\"),\n        plot.title = element_text(vjust = 5)) +\n  labs(title = \"Diagram of the Causes of Mortality in the Army in the East\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\nThis looks pretty close to the original diagram, except the order of the months does not match the original. We can of course change that by reordering the factor variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimean_war_data |> \n  # Manually relevel it to match the original plot\n  mutate(Month = fct_relevel(Month, \n                             \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\",\n                             \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\")) |>\n  ggplot(aes(x = Month, y = count)) + \n  geom_col(aes(fill = cause), width = 1, \n           position = \"identity\", alpha = 0.5) + \n  coord_polar() + \n  facet_wrap(~ time_period, ncol = 2) +\n  scale_fill_manual(values = c(\"skyblue3\", \"grey30\", \"firebrick\")) +\n  scale_y_sqrt() +\n  theme_void() +\n  # All of this below is to just customize the theme in a way that we are\n  # close to resembling the original plot (ie lets make it look old!)\n  theme(axis.text.x = element_text(size = 9),\n        strip.text = element_text(size = 11),\n        legend.position = \"bottom\",\n        plot.background = element_rect(fill = alpha(\"cornsilk\", 0.5)),\n        plot.margin = unit(c(10, 10, 10, 10), \"pt\"),\n        plot.title = element_text(vjust = 5)) +\n  labs(title = \"Diagram of the Causes of Mortality in the Army in the East\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nHow does this compare to just a simple line graph?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimean_war_data |> \n  ggplot(aes(x = Date, y = count, color = cause)) + \n  geom_line() +\n  # Add a reference line at the cutoff point\n  geom_vline(xintercept = as.Date(\"1855-03-01\"), linetype = \"dashed\",\n             color = \"gray\") +\n  scale_color_manual(values = c(\"skyblue3\", \"grey30\", \"firebrick\")) +\n  theme_bw() +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Diagram of the Causes of Mortality in the Army in the East\",\n       y = \"Counts\", x = \"Date\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can customize the x-axis further using [`scale_x_date()`](https://www.datanovia.com/en/blog/ggplot-date-axis-customization/):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimean_war_data |> \n  ggplot(aes(x = Date, y = count, color = cause)) + \n  geom_line() +\n  # Add a reference line at the cutoff point\n  geom_vline(xintercept = as.Date(\"1855-03-01\"), linetype = \"dashed\",\n             color = \"gray\") +\n  scale_color_manual(values = c(\"skyblue3\", \"grey30\", \"firebrick\")) +\n  # Format to use abbreviate month %b with year %Y\n  scale_x_date(date_labels = \"%b %Y\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Diagram of the Causes of Mortality in the Army in the East\",\n       y = \"Counts\", x = \"Date\")\n```\n\n::: {.cell-output-display}\n![](09-trends_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\nWhich one do you prefer? Maybe filling the area under the lines would be better here...\n",
    "supporting": [
      "09-trends_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}