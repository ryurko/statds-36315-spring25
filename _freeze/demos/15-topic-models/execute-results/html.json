{
  "hash": "305e11f49bfdff2ac54b18a1924d8ced",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Demo 15: Topic Models\"\nformat: html\n---\n\n\n\n\n# The Dialogue of Stranger Things \n\nIn this demo we'll work with the dialogue from [Stranger Things](https://en.wikipedia.org/wiki/Stranger_Things), which is available from [TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-10-18):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstranger_things_text <-\n  read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-18/stranger_things_all_dialogue.csv') |>\n  # Drop any lines with missing dialogue\n  filter(!is.na(dialogue))\n```\n:::\n\n\n\n\n# TidyText processing of script\n\nSimilar to the previous demo, we need to pre-process the `stranger_things_text` dataset into a tokenized form. Again, we'll use the [`tidytext` package](http://tidytextmining.com/) to convert the `dialogue` column into individual words as the tokens.\n\nBefore we do that, let's take a look at the Stranger Things dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(stranger_things_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  season episode  line raw_text     stage_direction dialogue start_time end_time\n   <dbl>   <dbl> <dbl> <chr>        <chr>           <chr>    <time>     <time>  \n1      1       1     9 [Mike] Some… [Mike]          Somethi… 01'44\"     01'48\"  \n2      1       1    10 A shadow gr… <NA>            A shado… 01'48\"     01'52\"  \n3      1       1    11 -It is almo… <NA>            It is a… 01'52\"     01'54\"  \n4      1       1    12 What if it'… <NA>            What if… 01'54\"     01'56\"  \n5      1       1    13 Oh, Jesus, … <NA>            Oh, Jes… 01'56\"     01'59\"  \n6      1       1    14 It's not th… <NA>            It's no… 01'59\"     02'00\"  \n```\n\n\n:::\n:::\n\n\n\n\nFor our purposes in this demo, we will treat each episode as a \"document\". Because the numeric values in the `episode` column are not unique across seasons, we need to create a unique episode ID column. One simple way to do this is with the [`unite()` function](https://tidyr.tidyverse.org/reference/unite.html) that comes loaded with the `tidyverse` (in the `tidyr` package). We'll use this function to create an `episode_id` column that is the result of simply pasting the `season` and `episode` columns together with some specified delimiter. Afterwards, we will only keep the `season`, `episode_id`, and `dialogue` columns. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstranger_things_text <- stranger_things_text |>\n  # Use the unite function \n  unite(\"episode_id\", season:episode,\n        # Keep the columns we're merging\n        remove = FALSE,\n        # Use the default separator:\n        sep = \"_\") |>\n  dplyr::select(season, episode_id, dialogue)\n```\n:::\n\n\n\n\nNow we'll use `unnest_tokens()` function to break each dialogue line into words We specify what the new column will be called, `word`, given the source of the text, which is `dialogue` here:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytext)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tidytext' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nstranger_things_words <- stranger_things_text |>\n  unnest_tokens(word, dialogue)\n\n# View the first so many rows:\nhead(stranger_things_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  season episode_id word     \n   <dbl> <chr>      <chr>    \n1      1 1_1        something\n2      1 1_1        is       \n3      1 1_1        coming   \n4      1 1_1        something\n5      1 1_1        hungry   \n6      1 1_1        for      \n```\n\n\n:::\n:::\n\n\n\n\nEach row of `stranger_things_words` corresponds to a single word in the dialogue for a particular episode in the show (during a single line, but we dropped that identifier). We can see that `season` and `episode_id` columns are still preserved in the data, but now the `dialogue` column has been broken up into thousands of rows. By default, punctuation marks are removed and all of the text is converted to lower case. \n\nBefore we continue to explore this dataset, we remove stop words but will NOT apply stemming. With topic models, stemming is not recommended due to issues that may arise in the generic stemming procedures.\n\nWe load a table of stop words and simply filter them out from our data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load stop words in the tidytext package\ndata(stop_words)\n\n# Next we can use the filter function to remove all stop words:\nstranger_things_words <- stranger_things_words |>\n  filter(!(word %in% stop_words$word))\n\n# Alternatively, we can do this with the anti_join function:\n# stranger_things_words <- stranger_things_words |>\n#   anti_join(stop_words)\n```\n:::\n\n\n\n\n\nUsing our usual `tidyverse` syntax, we will compute the frequency of each `word` in each episode:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_episode_word_summary <- stranger_things_words |>\n  # While we technically don't need the season column here, we'll just keep it\n  # for reference to have for later:\n  group_by(season, episode_id, word) |>\n  # Summarize with the count function:\n  count() |>\n  # Ungroup\n  ungroup()\n```\n:::\n\n\n\n\n# Topic modeling\n\n## Latent Dirichlet allocation\n\nLatent Dirichlet Allocation (LDA) is one of the most common algorithms for topic modeling. Without diving into the math behind the model, we can understand it as being guided by two principles:\n\n1. **Every document is a mixture of topics:** We imagine that each document may contain words from several topics in particular proportions. For example, in a two-topic model we could say \"Document 1 is 90% topic A and 10% topic B, while Document 2 is 30% topic A and 70% topic B.\"\n\n2. **Every topic is a mixture of words:** For example, we could imagine a two-topic model of American news, with one topic for \"politics\" and one for \"entertainment.\" The most common words in the politics topic might be \"President\", \"Congress\", and \"government\", while the entertainment topic may be made up of words such as \"movies\", \"television\", and \"actor\". Importantly, words can be shared between topics; a word like \"budget\" might appear in both equally.\n\nLDA is a mathematical method for estimating both of these at the same time: finding the mixture of words that is associated with each topic, while also determining the mixture of topics that describes each document. There are a number of existing implementations of this algorithm, and we'll explore one of them in depth.\n\nThe most common `R` package for implementing topic models is called, unsurprisingly, `topicmodels`. However, the `topicmodels` package requires a `DocumentTermMatrix` object. To address this, we can use `tidytext`'s `cast_dtm()` function on our `st_episode_word_summary` table from before - treating each episode as a separate document:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nepisode_dtm <- st_episode_word_summary |>\n  # Use the words\n  cast_dtm(episode_id, word, n)\n\nepisode_dtm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<<DocumentTermMatrix (documents: 34, terms: 7226)>>\nNon-/sparse entries: 22122/223562\nSparsity           : 91%\nMaximal term length: 27\nWeighting          : term frequency (tf)\n```\n\n\n:::\n:::\n\n\n\n\nNotice that this summary output displays information about the matrix, reflecting the high sparsity (proportion of 0s) in the matrix at 91% - due to the high number of unique words/tokens (7226). We are being a bit lazy here, since numbers are included - but we could remove those if we wanted to.\n\nPerforming Latent Dirichlet Allocation (LDA) is actually really easy in `R`; we just use the `LDA()` function from the `topicmodels` package. For example, setting `k = 2` creates a two-topic LDA model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(topicmodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'topicmodels' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# set a seed so that the output of the model is predictable\nst_lda <- LDA(episode_dtm, k = 2, control = list(seed = 1234))\nst_lda\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA LDA_VEM topic model with 2 topics.\n```\n\n\n:::\n:::\n\n\n\n\nAlmost any topic model in practice will use a larger `k`; we're just using `k = 2` as an example. But there are [a variety of approaches for tuning `k`](https://cran.r-project.org/web/packages/ldatuning/vignettes/topics.html) that are beyond the scope of this class.\n\nFitting the model was the easy part. The rest of the analysis will involve exploring and interpreting the model. The main thing you need to know is that the `LDA()` function gives you:\n\n+ For each document, the proportion of each topic (there will be `k = 2` of these for each document/episode). These proportions will be called `gamma`.\n\n+ For each topic, the probability of a certain word occurring (there are 7226 words, so there will be 7226 of these for each topic). These probabilities will be called `beta`.\n\nTypically, it's much more interesting to look at the second item (the probability of certain words occurring within a given topic) so we are going to focus on visualizing that below. We'll discuss the first item afterwards.\n\n## Word-topic probabilities\n\nThe `tidy()` function within the `tidytext` package provides an easy way to extract the per-topic-per-word probabilities, called $\\beta$ (\"beta\"), from the model.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_topics <- tidy(st_lda, matrix = \"beta\")\nst_topics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,452 × 3\n   topic term      beta\n   <int> <chr>    <dbl>\n 1     1 00    8.62e- 4\n 2     2 00    6.96e- 4\n 3     1 10    2.40e- 4\n 4     2 10    4.64e- 5\n 5     1 100   3.32e- 4\n 6     2 100   9.72e- 5\n 7     1 12    2.38e- 4\n 8     2 12    4.89e- 5\n 9     1 12.3  4.81e- 5\n10     2 12.3  1.11e-90\n# ℹ 14,442 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# note that these probabilities sum up to 1 within a given topic:\nst_topics |>\n  filter(topic == 1) |>\n  pull(beta) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\nThe above gives us a one-topic-per-term-per-row format. For each combination, the model computes the probability of that term being generated from that topic. For example, the token \"00\" has a $8.6214123\\times 10^{-4}$ probability of being generated from topic 1, but a $6.9575687\\times 10^{-4}$ probability of being generated from topic 2.\n\nWhat are the most prevalent words in each topic? In other words, which words have the largest `beta` within each topic? To answer this question, we can use the `top_n()` function within the `dplyr` package to find the 10 terms that are most common within each topic:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grab the words with the top ten probabilities (betas), and then organize \n# the data by topic, decreasing by beta\nst_top_terms <- st_topics |>\n  group_by(topic) |>\n  top_n(10, beta) |>\n  ungroup() |>\n  arrange(topic, -beta)\n\nst_top_terms\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n   topic term     beta\n   <int> <chr>   <dbl>\n 1     1 yeah  0.0279 \n 2     1 hey   0.0173 \n 3     1 gonna 0.00976\n 4     1 uh    0.00967\n 5     1 shit  0.00926\n 6     1 mike  0.00767\n 7     1 mom   0.00721\n 8     1 time  0.00668\n 9     1 stop  0.00577\n10     1 god   0.00572\n11     2 yeah  0.0244 \n12     2 hey   0.0129 \n13     2 shit  0.0122 \n14     2 uh    0.0107 \n15     2 gonna 0.0104 \n16     2 max   0.00714\n17     2 time  0.00679\n18     2 eddie 0.00502\n19     2 stop  0.00499\n20     2 el    0.00457\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot the data such that there is a plot for each topic, and the probabilities\n# are in decreasing order. There are many ways to do this, and this is just one:\nst_top_terms |>\n  mutate(term = reorder_within(term, beta, topic)) |>\n  ggplot(aes(term, beta, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\") +\n  coord_flip() +\n  scale_x_reordered()\n```\n\n::: {.cell-output-display}\n![](15-topic-models_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nThis visualization attempts to help us understand the two topics that were extracted from the episodes' words. Obviously, there is noticeable overlap between these topics as both feature \"yeah\", \"hey\", \"uh\", and other frequently used words across the show. This is an advantage of topic modeling as opposed to \"hard clustering\" methods: topics used in natural language could have some overlap in terms of words. (\"Hard clustering\" methods would force each word to be in a single topic, rather than letting there be overlap between topics.) But there are differences, such as \"mom\" and \"mike\" in Topic 1 versus \"max\" and \"eddi\" in Topic 2. This might hint at Topic 2 being associated with later seasons of the show - such as the rather long and verbose Season 4...\n\nNote that we can also make a word cloud for each topic, where the $\\beta$s act as the \"frequency\" for each word. As an example, the following code makes a word cloud for the first and second topics:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset into different topics\ntopic1 <- st_topics |>\n  filter(topic == 1)\ntopic2 <- st_topics |>\n  filter(topic == 2)\n\nlibrary(wordcloud)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: RColorBrewer\n```\n\n\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\nwordcloud(words = topic1$term, freq = topic1$beta,\n          random.order = FALSE,\n          max.words = 100,\n          col = \"red\",\n          scale=c(2,.5))\ntitle(main = \"Topic 1\")\nwordcloud(words = topic2$term, freq = topic2$beta,\n          random.order = FALSE,\n          max.words = 100,\n          col = \"blue\", \n          scale=c(2,.5))\ntitle(main = \"Topic 2\")\n```\n\n::: {.cell-output-display}\n![](15-topic-models_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nThe above visuals tell us which words are frequent within each topic, but they do not necessarily tell us what the most \"important\" words are in each topic. In other words: Are there words that occur frequently in one topic but not another topic?\n\nTo answer this question, let's consider the terms that have the *greatest difference* in $\\beta$ between Topic 1 and Topic 2. This can be estimated based on the log ratio of the two: $\\log_2(\\frac{\\beta_2}{\\beta_1})$ (a log ratio is useful because it makes the difference symmetric: $\\beta_2$ being twice as large leads to a log ratio of 1, while $\\beta_1$ being twice as large results in -1). To constrain it to a set of especially relevant words, we can filter for relatively common words, such as those that have a $\\beta$ greater than 1/1000 in at least one topic. (This is another threshold that is more an art than a science; in practice, you have to toy around with this threshold until you get a visual that seems to produce \"conceptual separation\" between the two topics.)\n\nTo get at this question, it's useful to create a dataset where you have (for each word) the betas for each topic side by side, as well as their log-ratio. There are many ways to do this, but we opt to use the [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_spread <- st_topics |>\n  mutate(topic = paste0(\"topic\", topic)) |>\n  pivot_wider(names_from = topic, values_from = beta) |>\n  filter(topic1 > .001 | topic2 > .001) |>\n  mutate(log_ratio = log2(topic2 / topic1)) |>\n  arrange(log_ratio)\n\nbeta_spread\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 213 × 4\n   term        topic1    topic2 log_ratio\n   <chr>        <dbl>     <dbl>     <dbl>\n 1 mama       0.00135 0.0000471     -4.84\n 2 suzie      0.00173 0.0000979     -4.14\n 3 sunflower  0.00101 0.0000922     -3.45\n 4 bob        0.00149 0.000231      -2.69\n 5 demogorgon 0.00105 0.000190      -2.47\n 6 breathe    0.00225 0.000429      -2.39\n 7 russians   0.00116 0.000225      -2.37\n 8 rainbow    0.00135 0.000279      -2.27\n 9 field      0.00109 0.000343      -1.66\n10 barb       0.00129 0.000428      -1.59\n# ℹ 203 more rows\n```\n\n\n:::\n:::\n\n\n\n\nAfter creating such a dataset, it can be helpful to make a plot with the log-ratio on the x-axis and words on the y-axis. Again we use the `top_n()` function to plot just the top 10 log-ratios in either direction (positive or negative):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_spread |>\n  group_by(direction = log_ratio > 0) |>\n  top_n(10, abs(log_ratio)) |>\n  ungroup() |>\n  mutate(term = reorder(term, log_ratio)) |>\n  ggplot(aes(term, log_ratio, fill = direction)) +\n  geom_col(show.legend = FALSE) +\n  labs(y = \"Log2 ratio of beta in topic 2 / topic 1\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](15-topic-models_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nThe way to interpret the above plot is that very positive values indicate that that word is relatively \"important\" for Topic 2, while very negative values indicate relative \"importance\" for Topic 1. We can see that the most important words in Topic 2 include words related to Season 4 of the show like \"nina\", \"yuri\", and \"munson\". Topic 1 appears to be more characterized by words and names from the first three seasons like \"barb\" and \"clark\" (their teacher!). This type of analysis can help identify differences between topics.\n\n## Document-topic probabilities\n\nBesides estimating each topic as a mixture of words, LDA also models each document as a mixture of topics. Similar to what we did in the previous section, we can examine the per-document-per-topic probabilities, called $\\gamma$ (\"gamma\"), with the `matrix = \"gamma\"` argument to `tidy()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_documents <- tidy(st_lda, matrix = \"gamma\")\nst_documents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 68 × 3\n   document topic     gamma\n   <chr>    <int>     <dbl>\n 1 1_1          1 1.00     \n 2 1_2          1 1.00     \n 3 1_3          1 0.976    \n 4 1_4          1 0.202    \n 5 1_5          1 0.0000384\n 6 1_6          1 1.00     \n 7 1_7          1 1.00     \n 8 1_8          1 1.00     \n 9 2_1          1 1.00     \n10 2_2          1 0.0000356\n# ℹ 58 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# for example, look at the probabilities for the first episode in each season:\nst_documents |>\n  filter(document %in% c(\"1_1\", \"2_1\", \"3_1\", \"4_1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  document topic     gamma\n  <chr>    <int>     <dbl>\n1 1_1          1 1.00     \n2 2_1          1 1.00     \n3 3_1          1 1.00     \n4 4_1          1 0.0000218\n5 1_1          2 0.0000337\n6 2_1          2 0.0000368\n7 3_1          2 0.0000400\n8 4_1          2 1.00     \n```\n\n\n:::\n:::\n\n\n\n\nEach of these values is an estimated proportion of words from that document that are generated from that topic. For example, the model estimates that basically 100% of the words in the first episode for seasons 1-3 (`1_1`, `2_1`, `3_1`) were generated from Topic 1. In comparison, the first episode in season 4 (`4_1`) displays the opposite behavior with 100% of the words from Topic 2.\n\n# Additional References and Resources for Other Text Topics\n\n+  **Word vectors**, e.g., \"King - Man + Woman = Queen\", [text2vec package on GitHub](https://github.com/dselivanov/text2vec)\n\n+  See [this chapter](http://tidytextmining.com/ngrams.html) in the Tidy Text Mining book on n-grams, correlations, etc\n\n+  [LSA of subreddits](https://www.r-bloggers.com/comparing-subreddits-with-latent-semantic-analysis-in-r/)\n\n+  The [Topic Modeling chapter](http://tidytextmining.com/topicmodeling.html) of Tidy Text Mining\n\n+ [Structural topic models](https://juliasilge.com/blog/sherlock-holmes-stm/)\n\n\n\n",
    "supporting": [
      "15-topic-models_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}