{
  "hash": "9132fe2b86425d52c07d14f3f5198ae0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Demo 04: Nonlinear Regression and Pairs Plots\"\nformat: html\n---\n\n\n\n\n# More fun with penguins\n\n**The graphs below don't have proper titles, axis labels, legends, etc.  Please take care to do this on your own graphs.** Throughout this demo we will use the [`palmerpenguins` dataset](https://allisonhorst.github.io/palmerpenguins/articles/intro.html). To access the data, you will need to install the `palmerpenguins` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n\n\n# Load the penguins dataset\n\nWe load the `penguins` data in the same way as the previous demos:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n# LOESS regression with ggplot\n\nAs discussed in lecture, we can use local regression / loess smoothing in `geom_smooth()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"loess\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nNote that this is actually the default behavior of `geom_smooth()` if you do NOT specify the method:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\nNote that if you don't put anything in `geom_smooth`, it will select \"auto\", meaning that choice for the smoothing method will be based on the size of the dataset (i.e., `nrow(dataset)`). LOESS is selected (i.e., `method = \"loess\"`) for less than 1,000 observations. Otherwise, `mgcv::gam()` is used with `formula = y ~ s(x, bs = \"cs\")` and `method = \"REML\"`. \n\nSo, if your dataset is smaller than 1,000 observations but want to use the same `gam()` model that `geom_smooth()` will use by default for larger datasets, then use `geom_smooth(method = \"gam\", formula = y ~ s(x, bs = \"cs\"))`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"gam\", formula = y ~ s(x, bs = \"cs\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Adjusting the `span`\n\nWhen using `method = \"loess\"`, we can control the proportion of observations that are used when estimating the local regression (i.e., the size of the neighborhood around the observation of interest) with the `span` argument. For `span` < 1, then the \"neighborhood\" includes proportion `span` of all possible points. By default, `method = \"loess\"` using the tri-cubic weighting, such that the weight is proportional to `(1 - (dist / maxdist)^3)^3` (where `maxdist` refers to the maximum distance from the observations in the considered neighborhood). The default setting is `span = 0.75`, meaning that 75% of the dataset's observations are used when fitting the local linear regression with weights. We can change `span` directly in `geom_smooth()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(span = .2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nUpdate to use all observations instead:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(span = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n# Pairs plot with [`GGally`](https://ggobi.github.io/ggally/index.html)\n\nWe will use the [`GGally`](https://ggobi.github.io/ggally/index.html) package to make pairs plots in `R` with `ggplot` figures. You need to install the package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"GGally\")\n```\n:::\n\n\n\n\nNext, we'll load the package and create a pairs plot of just the continuous variables using `ggpairs`. The main arguments you have to worry about for `ggpairs` are `data`, `columns`, and `mapping`:\n\n+ `data`: Specifies the dataset\n+ `columns`: Columns of data you want in the plot (can specify with vector of column names or numbers referring to the column indices).\n+ `mapping`: Aesthetics using `aes()`. Most important one is `aes(color = <variable name>)`.\n\nFirst, let’s create a pairs plot by specifying `columns` as the four columns of continuous variables (columns 3 through 6):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(GGally)\npenguins |> ggpairs(columns = 3:6)\n```\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nObviously this suffers from over-plotting so we'll want to adjust the `alpha`. An annoying thing is that we specify the `alpha` inside `aes` when using `ggpairs`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> ggpairs(columns = 3:6, mapping = aes(alpha = 0.5))\n```\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nPlots along the diagonal show marginal distributions. Plots along the off-diagonal show joint (pairwise) distributions or statistical summaries (e.g., correlation) to avoid redundancy. The matrix of plots is symmetric; e.g., entry (1,2) shows the same distribution as entry (2,1). However, entry (1,2) and entry (2,1) display different bits of information (or alternative plots) about the same distribution.\n\nWe could also specify categorical variables in the plot. We also don't need to specify column indices if we just `select` which columns to use beforehand:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  dplyr::select(bill_length_mm, body_mass_g, species, island) |>\n  ggpairs(mapping = aes(alpha = 0.5))\n```\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nAlternatively, we can use the mapping argument to display these categorical variables in a different manner - and arguably more efficiently:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggpairs(columns = c(\"bill_length_mm\", \"body_mass_g\", \"island\"),\n          mapping = aes(alpha = 0.5, color = species))\n```\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nThe `ggpairs` function in `GGally` is very flexible and customizable with regards to which figures are displayed in the various panels. [I encourage you to check out the vignettes and demos on the package website for more examples.](https://ggobi.github.io/ggally/articles/ggpairs.html) For instance, in the pairs plot below I decide to display the regression lines and make other adjustments to the off-diagonal figures:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggpairs(columns = c(\"bill_length_mm\", \"body_mass_g\", \"island\"),\n          mapping = aes(alpha = 0.5, color = species), \n          lower = list(\n            continuous = \"smooth_lm\", \n            combo = \"facetdensitystrip\"\n          ),\n          upper = list(\n            continuous = \"cor\",\n            combo = \"facethist\"\n          )\n  )\n```\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can also proceed to customize the pairs plot in the same manner as `ggplot` figures:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  dplyr::select(species, body_mass_g, ends_with(\"_mm\")) |>\n  ggpairs(mapping = aes(color = species, alpha = 0.5),\n          columns = c(\"flipper_length_mm\", \"body_mass_g\",\n                      \"bill_length_mm\", \"bill_depth_mm\")) +\n  scale_colour_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  theme_bw() +\n  theme(strip.text = element_text(size = 7))\n```\n\n::: {.cell-output-display}\n![](04-nonlinear-pairs_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "04-nonlinear-pairs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}