{
  "hash": "e2c3e94674cd236383f7a78a5fca07b6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Demo 11: Animations, modifying colors and themes\"\nformat: html\n---\n\n\n\n\n# Use [`gganimate`](https://gganimate.com/) to add animations\n\nBy far, the simplest way to create visualizations with animations is to use the [`gganimate` package](https://gganimate.com/). This effectively works as an extension to `ggplot` figures but with the inclusion of various `transition_*` functions\n\n## When should we animate plots?\n\nFirst, let's think about when you should __NOT__ animate a plot. We first create a visualization of the `penguins` data from before, of bill length on the `y`-axis against the body mass on the `x-axis` colored by `species`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\nNow, we _could_ do the following: use the `gganimate` package to only display one `species` at a time with the `transition_states()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_bw() +\n  transition_states(species,\n                    transition_length = 0.5,\n                    state_length = 1)\n```\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-2-1.gif)\n:::\n:::\n\n\n\n\nThe use of `transition_length` and `state_length` indicate how much _relative_ time should take place when transitioning between states and the pause at each state, respectively.  __But the above use of animation is useless!__\n\n![](https://c.tenor.com/YdcVUzGWl2wAAAAC/useless-starwars.gif)\n\n\n__So when should you consider using animation?__\n\nOne appropriate usage is in the context of storytelling with data, to emphasize some aspect of your visual display. For instance, we'll borrow this F1 racing dataset from [Meghan Hall's data viz](https://cmu-36315.netlify.app/) to compare the performance of three racing teams:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First load the data from Meghan's github\nf1_data_ex <- read_csv('https://raw.githubusercontent.com/meghall06/CMU-36-315-site/main/data/constructor_pts.csv') |>\n  filter(name %in% c(\"McLaren\", \"Renault\", \"Racing Point\"),\n         year == 2020)\n\n# Now display the results across the rounds:\nf1_data_ex |>\n  ggplot(aes(x = round, y = points, group = name, color = name)) +\n  geom_line(size = 2) +\n  scale_x_continuous(breaks = seq(1, 17, 1)) +\n  labs(title = \"The race for third place in the 2020 F1 season\",\n       y = \"Accumulated points\", x = NULL) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFrom above we can see the accumulated points increasing over time for each team, with McLaren finishing better than both, Racing Point and Renault, at the end. But we could incrementally reveal the results at each stage emphasize the story of progression. We're not adding another dimension to the display, but we emphasize the intermediate results through animation with the `transition_reveal()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1_data_ex |>\n  ggplot(aes(x = round, y = points, group = name, color = name)) +\n  geom_line(size = 2) +\n  scale_x_continuous(breaks = seq(1, 17, 1)) +\n  labs(title = \"The race for third place in the 2020 F1 season\",\n       y = \"Accumulated points\", x = NULL) +\n  theme_bw() +\n  # Reveal the results by round\n  transition_reveal(round)\n```\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-4-1.gif)\n:::\n:::\n\n\n\n\n\nThe most effective use of animation is when it adds another dimension to your visualization, typically in the form of time. The previous visualization only animated across the x-axis - it did NOT add another variable in our data. However, animation can let us bring in another dimension so that we can see differences between relationships of variables in various ways. You should watch [Hans Rosling's 200 Countries, 200 Years, 4 Minutes](https://www.youtube.com/watch?v=jbkSRLYSojo) to see one example in action. We can make similar visualizations with `gganimate`. \n\nIn the code chunk below, we're going to display yearly summaries about housing sales in TX (dataset comes loaded with `ggplot2`). We're going to plot the average number of active listings and average median sale price for each city-year combination in the data. For context, we're going to highlight the data for Houston in red with a larger point size:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the scales package for better labeling of the axes\ntxhousing |> \n  group_by(city, year) |> \n  summarize(median = mean(median, na.rm = TRUE),\n            listings = mean(listings, na.rm = TRUE)) |> \n  ggplot(aes(x = median, y = listings, \n             color = (city == \"Houston\"),\n             size = (city == \"Houston\"))) +\n  # Hide the legend for the point layer\n  geom_point(alpha = 0.5, show.legend = FALSE) +\n  # Manual color label\n  scale_color_manual(values = c(\"black\", \"darkred\")) +\n  # Manual size adjustment\n  scale_size_manual(values = c(2, 4)) +\n  scale_x_continuous(labels = scales::dollar, name = \"Median Price\") +\n  scale_y_continuous(labels = scales::label_number(scale_cut = scales::cut_short_scale())) +\n  theme_bw() +\n  labs(x = \"Median Price\", y = \"Avg. of Monthly Listings\",\n       subtitle = \"Houston in red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'city'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 68 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIn the figure above we do not have year included in any way. But we can use the `transition_time()` function to animate the visual over time, while also updating the plot title to include the displayed year:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the scales package for better labeling of the axes\ntxhousing |> \n  group_by(city, year) |> \n  summarize(median = mean(median, na.rm = TRUE),\n            listings = mean(listings, na.rm = TRUE)) |> \n  ggplot(aes(x = median, y = listings, \n             color = (city == \"Houston\"),\n             size = (city == \"Houston\"))) +\n  # Hide the legend for the point layer\n  geom_point(alpha = 0.5, show.legend = FALSE) +\n  # Manual color label\n  scale_color_manual(values = c(\"black\", \"darkred\")) +\n  # Manual size adjustment\n  scale_size_manual(values = c(2, 4)) +\n  scale_x_continuous(labels = scales::dollar, name = \"Median Price\") +\n  scale_y_continuous(labels = scales::label_number(scale_cut = scales::cut_short_scale())) +\n  theme_bw() +\n  labs(x = \"Median Price\", y = \"Avg. of Monthly Listings\",\n       subtitle = \"Houston in red\", \n       title = \"Year: {frame_time}\") +\n  transition_time(year)\n```\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-6-1.gif)\n:::\n:::\n\n\n\n\nFrom viewing the above visual, you can see how animation makes changes appear more dramatic between years - versus plotting each year separately with facets. We can then save the above animation as a GIF with the `anim_save(\"INSERT/FILEPATH\")` function, which will save the last animation you made by default.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanim_save(\"examples/txhousing.gif\")\n```\n:::\n\n\n\n\nSome key points to think about before adding animation to a visualization:\n\n1. Always make and describe the original / base graphic first that does NOT include animation.\n\n2. Before adding animation to the graph, ask yourself: How would animation give you additional insights about the data **that you would otherwise not be able to**?\n\n3. Never add animation just because it's cool! \n\n4. When presenting, make sure you explain exactly what is being displayed with animation and what within the animation you want to emphasize. This will help you determine if animation is actually worth including.\n\n# Notes on colors in plots\n\nThree types of color scales to work with:\n\n1. __Qualitative__: distinguishing discrete items that don't have an order (nominal categorical). Colors should be distinct and equal with none standing out unless otherwise desired for emphasis.\n\n+ Do __NOT__ use a discrete scale on a continuous variable\n\n2. __Sequential__:  when data values are mapped to one shade, e.g., in a choropleth, for an ordered categorical variable or low to high continuous variable\n\n+ Do __NOT__ use a sequential scale on an unordered variable\n\n3. __Divergent__: think of it as two sequential scales with a natural midpoint\nmidpoint could represent 0 (assuming +/- values) or 50% if your data spans the full scale\n\n+ Do __NOT__ use a divergent scale on data without natural midpoint\n\n\n## Options for `ggplot2` colors\n\nThe default color scheme is pretty bad to put it bluntly, but `ggplot2` has ColorBrewer built in which makes it easy to customize your color scales. For instance, we change the palette for the species plot from before.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nSomething you should keep in mind is to pick a [color-blind friendly palette](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/). One simple way to do this is by using the `ggthemes` package which has color-blind friendly palettes included:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nIn terms of displaying color from low to high, the [viridis scales](https://ggplot2.tidyverse.org/reference/scale_viridis.html) are excellent choices (and are also color-blind friendly!).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, \n             color = flipper_length_mm)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\",\n       color = \"Flipper Length (mm)\") +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Notes on themes\n\nThroughout the semester, you have seen various changes to the `theme` of plots for customization in lectures and assignments. __You will constantly be changing the theme of your plots to optimize the display.__ Fortunately, there are a number of built-in themes you can use to start with rather than the default `theme_gray()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_gray()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nFor instance, you have seen me use `theme_bw()` many times throughout the semester:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nAs well as `theme_light()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_light()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nThere are options such as `theme_minimal()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\nor `theme_classic()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThere are also packages with popular, such as the `ggthemes` package which includes, for example, `theme_economist()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggthemes' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_economist()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nand `theme_fivethirtyeight()` to name a couple:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\") +\n  theme_fivethirtyeight()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\nWith any theme you have picked, you can then modify specific components directly using the `theme()` layer. There are [many aspects of the plot's theme to modify](https://ggplot2.tidyverse.org/reference/theme.html), such as my decision to move the legend to the bottom of the figure, drop the legend title, and increase the font size for the y-axis:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\",\n       title = \"Larger penguins tend to have larger bills\",\n       subtitle = \"Positive relationship between mass and length is consistent across species\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        axis.text.y = element_text(size = 14),\n        axis.text.x = element_text(size = 6))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIf you're tired of explicitly customizing every plot in the same way all the time, then you should make a custom theme. It's quite easy to make a custom theme for `ggplot2` and of course [there are an incredible number of ways to customize your theme](https://themockup.blog/posts/2020-12-26-creating-and-using-custom-ggplot2-themes/). In the code chunk, I modify the `theme_bw()` theme using the `%+replace%` argument to make my new theme named `my_theme()` - which is stored as a function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_theme <- function () {\n  # Start with the base font size\n  theme_bw(base_size = 10) %+replace%\n    theme(\n      panel.background  = element_blank(),\n      plot.background = element_rect(fill = \"transparent\", color = NA), \n      legend.position = \"bottom\",\n      legend.background = element_rect(fill = \"transparent\", color = NA),\n      legend.key = element_rect(fill = \"transparent\", color = NA),\n      axis.ticks = element_blank(),\n      panel.grid.major = element_line(color = \"grey90\", size = 0.3), \n      panel.grid.minor = element_blank(),\n      plot.title = element_text(size = 18, \n                                hjust = 0, vjust = 0.5, \n                                face = \"bold\", \n                                margin = margin(b = 0.2, unit = \"cm\")),\n      plot.subtitle = element_text(size = 12, hjust = 0, \n                                   vjust = 0.5, \n                                   margin = margin(b = 0.2, unit = \"cm\")),\n      plot.caption = element_text(size = 7, hjust = 1,\n                                  face = \"italic\", \n                                  margin = margin(t = 0.1, unit = \"cm\")),\n      axis.text.x = element_text(size = 13),\n      axis.text.y = element_text(size = 13)\n    )\n}\n```\n:::\n\n\n\n\n\nNow I can go ahead and my plot from before with this theme:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point(alpha = 0.5, size = 2) +\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Body Mass (g)\", y = \"Bill Length (mm)\",\n       title = \"Larger penguins tend to have larger bills\",\n       subtitle = \"Positive relationship between mass and length is consistent across species\") +\n  my_theme()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-anim-colors-themes_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "11-anim-colors-themes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}